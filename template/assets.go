// Code generated by go-bindata.
// sources:
// property/default/config.hcl
// property/default/field.tmpl
// property/default/method.tmpl
// type/default/config.hcl
// type/default/type.tmpl
// DO NOT EDIT!

package template

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _propertyDefaultConfigHcl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\xcb\x4c\xcd\x49\x51\xb0\x55\x50\x02\x33\xf4\x4a\x72\x0b\x72\x94\xb8\x72\x53\x4b\x32\xf2\xc1\xa2\x10\x16\x54\x18\x10\x00\x00\xff\xff\xda\x37\xa8\x72\x2c\x00\x00\x00")

func propertyDefaultConfigHclBytes() ([]byte, error) {
	return bindataRead(
		_propertyDefaultConfigHcl,
		"property/default/config.hcl",
	)
}

func propertyDefaultConfigHcl() (*asset, error) {
	bytes, err := propertyDefaultConfigHclBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "property/default/config.hcl", size: 44, mode: os.FileMode(420), modTime: time.Unix(1488374780, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _propertyDefaultFieldTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\xd7\x57\xa8\xae\x4e\x4e\x2c\xc8\x2c\x49\xcc\xc9\xac\x4a\x55\xd0\x73\xcb\x4c\xcd\x49\xf1\x4b\xcc\x4d\xad\xad\x05\xca\x40\xb8\x2e\xa9\xc5\xc9\x45\x99\x05\x25\x99\xf9\x79\xb5\xb5\x5c\x84\xd5\x87\x54\x16\x80\xb8\x09\x59\xc5\xf9\x79\x56\x4a\x30\x51\x88\x22\xa5\x04\x2e\x40\x00\x00\x00\xff\xff\x1c\x2b\xdd\xa2\x74\x00\x00\x00")

func propertyDefaultFieldTmplBytes() ([]byte, error) {
	return bindataRead(
		_propertyDefaultFieldTmpl,
		"property/default/field.tmpl",
	)
}

func propertyDefaultFieldTmpl() (*asset, error) {
	bytes, err := propertyDefaultFieldTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "property/default/field.tmpl", size: 116, mode: os.FileMode(420), modTime: time.Unix(1488485204, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _propertyDefaultMethodTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x51\xcb\x4e\xeb\x30\x10\xdd\xf7\x2b\x46\xd1\x5d\xb4\x5d\xb8\x77\x8d\xc4\xa2\x94\x22\x01\xa2\x48\x55\xf7\xc8\x4a\x27\xa9\x25\xc7\x09\xb6\x83\x54\x5c\xff\x3b\x13\x3b\xa9\x1b\x04\x2c\x61\xe7\xc7\x99\x33\xe7\xe1\x1c\xec\xb1\x10\x0a\x21\xe3\xba\x6c\x2b\x54\xd6\x64\xe0\x3d\x5d\x0c\xcc\x8d\xd5\x6d\x6e\xdd\x04\xc0\x39\xcd\x55\x89\xc0\xbc\x77\x8e\x6d\x78\x85\x70\x82\x9c\x37\xc2\x72\x29\xde\xd1\x7b\x42\xb0\xdd\xb1\xa1\x53\x40\xa3\xda\xd3\x89\xb0\x40\x27\xe2\x9b\x38\x37\xec\xd1\x98\xa3\x78\x43\x9d\x75\x54\xa2\x00\x61\x5e\x68\xab\x3e\x02\x23\xdc\x16\x4d\x2d\xe9\x93\x18\xa4\xc1\xb0\x6c\xf4\xd8\xd1\x0e\xec\x61\x1a\x5f\x21\xec\x7d\x14\xb4\x27\x7b\xbe\x79\x58\xaf\x76\x59\xf8\xfc\x77\xe0\x66\x39\x78\x82\xab\x6b\x28\x2d\x4c\xd9\x13\xda\x43\xbd\x4f\xef\x27\x90\xa8\x66\xf0\x9f\x46\x16\x0b\x12\x9e\x3c\x41\x8f\xed\xcc\x46\x7f\xf1\x7e\x8b\x26\xd7\xa2\xb1\xa2\x56\x34\x54\xb4\x2a\x87\xa9\x86\xb9\x73\x16\xab\x46\x72\x7b\x69\x31\x6a\x8b\x0c\xb3\x1f\xd8\xa7\xc1\xcb\x48\x71\xe7\x33\x31\x5e\x94\xf3\xd9\xc2\x39\x90\x59\xd2\xb8\x45\xdb\x6a\x15\xfb\x80\xd8\xdf\x28\xe9\xa4\x4a\x07\x24\x28\x21\x87\xc8\xfb\x17\xcd\xfa\x46\x23\x8e\x7d\x25\x3e\xae\x49\x8d\x74\xb1\x7f\xdb\xcd\xfd\x66\xb7\xde\xde\x2d\x57\xeb\xdf\xac\xe7\x6f\x22\x3f\xc7\xf0\x11\x00\x00\xff\xff\xa5\x2d\xa9\x13\x5f\x03\x00\x00")

func propertyDefaultMethodTmplBytes() ([]byte, error) {
	return bindataRead(
		_propertyDefaultMethodTmpl,
		"property/default/method.tmpl",
	)
}

func propertyDefaultMethodTmpl() (*asset, error) {
	bytes, err := propertyDefaultMethodTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "property/default/method.tmpl", size: 863, mode: os.FileMode(420), modTime: time.Unix(1488485204, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeDefaultConfigHcl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\xa9\x2c\x48\x55\xb0\x55\x50\x02\xd1\x7a\x25\xb9\x05\x39\x4a\x5c\x80\x00\x00\x00\xff\xff\x3a\x12\xfd\xa1\x13\x00\x00\x00")

func typeDefaultConfigHclBytes() ([]byte, error) {
	return bindataRead(
		_typeDefaultConfigHcl,
		"type/default/config.hcl",
	)
}

func typeDefaultConfigHcl() (*asset, error) {
	bytes, err := typeDefaultConfigHclBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/default/config.hcl", size: 19, mode: os.FileMode(420), modTime: time.Unix(1488404377, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeDefaultTypeTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x56\xdf\x6f\xda\x30\x10\x7e\x5e\xfe\x8a\x1b\xaa\xa6\xa4\x62\xe9\xfb\xa6\x3e\x74\x34\x9d\xe8\x5a\xe8\x20\xf4\x65\x9a\x2a\x13\x0c\x78\x35\x76\xea\x98\x4a\x8c\xe5\x7f\x9f\x7f\x24\xc1\x81\x50\x56\xad\xd5\xb4\x27\xc8\xdd\xf9\xbe\xcf\xf7\xdd\xe5\x72\x72\x02\xf1\x9c\x64\x90\xf0\x09\x06\xf5\x3b\xc3\x0c\x0b\x8c\x24\x9e\xc0\x78\x05\x33\x81\xd2\xf9\x03\x7d\xaf\xbd\xca\xe3\xa9\xe8\xf3\x3e\xf4\xfa\x31\x44\xe7\xdd\xf8\xad\xe7\xa5\x28\xb9\x47\x33\x0c\xeb\x75\xd8\xe1\x6c\x4a\x66\xe1\x8d\xb5\xe4\xf9\x47\xcf\xf3\xc8\x22\xe5\x42\x82\xef\xad\xd7\x64\x0a\xf8\x01\xc2\x2f\x84\x4d\xa0\xd5\xff\x74\x19\x75\xe2\x56\x9e\x7b\x00\xc6\xc5\xb8\x8a\x22\xd9\x1d\x66\x52\xac\x20\x8c\x57\x29\xee\xa1\x05\x0e\xc0\x84\xb4\x30\x53\x0c\x08\x9b\x9d\xfc\xc8\x38\x6b\x99\x43\x98\x4d\x94\xaf\xfc\xd5\x16\x81\x98\x62\x12\x76\x0d\x66\x66\x8c\xda\x1c\x16\x6e\x1b\x18\xec\xa7\x72\x90\x88\xba\xbd\x4a\x57\x9a\xf2\xbc\x7c\x3a\xc7\x59\x22\x48\x2a\x09\x67\x2a\x4a\x2a\xcb\x56\x5c\x26\xc5\x32\x91\xb0\x76\x69\x5e\x10\x4c\x27\x8a\xa5\x21\x58\xb2\xcb\xbd\x1d\x90\x01\xce\x38\x7d\xc4\x02\x44\xf9\x67\xca\x45\x3d\xa4\x01\xb2\x3a\x55\x83\x76\xcf\x6c\x6a\x57\x51\xba\xc6\x72\xce\x2b\x4e\x8e\xff\x40\x5d\xa6\x4b\x96\x80\x2f\xe0\xb8\x91\x42\x00\xd7\x48\x64\x73\x44\x2f\x87\xfd\x9e\x1f\x80\xff\xed\xfb\x78\x25\x71\x1b\xb0\x10\x5c\x79\x35\x35\x81\xe5\x52\x30\xd0\xea\x86\x45\xb4\xff\x4e\x84\xb5\x7c\x81\xae\xce\x21\xa8\x11\x5b\x38\x60\x13\x24\x11\x58\xb8\xc0\xc2\xed\xa0\x55\x07\x4c\x70\x1b\x9a\x50\xb7\x9b\x6d\xbb\x85\xba\xbd\x38\x1a\x5c\x9c\x75\xa2\xd6\xdf\x34\x09\x61\x12\x8b\x29\x4a\x70\xbd\x4f\xea\xa2\xfc\xa3\x46\x81\x23\x59\x18\xe0\xc3\xe9\x46\x7d\x70\xba\xe7\x28\xe5\x59\x46\xc6\x14\x6b\xa7\x89\xba\x71\x0c\x76\x1c\x1d\xf5\xaa\x84\xae\x7a\x31\x57\x0e\x37\x4f\x9e\xeb\x86\x39\xde\xb1\x96\x47\xda\x30\xe6\x9c\xda\x1e\x02\x48\xda\xc0\xef\x35\xb4\xd6\xd0\x01\x08\x9f\xc8\x10\x78\x6f\xa0\xea\x08\x93\x40\xa5\xaa\x49\xdd\xac\xf9\xa8\xd7\xed\xf7\x9a\xf4\x7e\x15\x19\xe0\x17\xa8\xd2\xa1\x94\x48\x44\xc9\xcf\x5a\xb7\xac\xff\x7f\x85\x76\x6e\xf7\x1a\x82\x45\xbd\xd1\xb5\x7d\xcb\x3f\x59\x2a\xeb\x74\x86\xb5\x8a\x71\x6d\xcf\x9d\x73\xa7\x96\x5a\x61\xb5\xc9\xbc\x84\xb3\xcc\x6e\xc6\x42\x9d\x47\x44\x97\x96\x51\xc4\x96\x8b\x5b\xfd\x64\x35\x31\x48\x4e\x06\xf5\x60\x62\x0d\xe6\x36\xdd\x62\xd9\x35\x87\x9f\xd6\x3d\x7e\x6b\xe3\x6b\x05\x9e\xbb\x22\xf7\xbd\xe8\x6e\x46\xf1\xdd\x66\x63\xbe\xe8\x42\xec\xb2\x74\x29\xf7\x6c\xc5\x7d\x84\x06\xd1\xb0\x7f\x75\x1b\x0d\x5e\x86\xcc\x7e\x9c\x61\xe7\xec\xea\xac\x11\xa5\x1a\xdc\x3f\x44\x6b\x1a\x74\xab\x7c\x7d\xa2\x0f\x6e\x3a\xf5\x99\x43\xf1\x42\xad\xe3\xec\xb3\xfe\x48\xfb\x7a\xa5\x83\x7c\xa6\x1b\xd9\x76\x58\x60\x26\xaf\x18\xbc\x62\x5e\xa6\x88\x66\xf8\x59\x7b\xb4\x48\xee\x13\xad\x8e\xcb\xd1\x5d\xa8\xaa\x28\xc3\x04\x51\x75\x02\x18\x56\x5f\x8e\x92\xc3\x58\x5d\xa8\x64\xa8\x2c\x0b\xc4\x96\x88\xd2\x95\xde\xbe\xa1\xbd\xef\x29\x98\x9c\x9b\x7d\xcc\x08\xf5\x9c\x01\xfe\x1d\x00\x00\xff\xff\xed\xfc\x83\xd6\x9a\x0a\x00\x00")

func typeDefaultTypeTmplBytes() ([]byte, error) {
	return bindataRead(
		_typeDefaultTypeTmpl,
		"type/default/type.tmpl",
	)
}

func typeDefaultTypeTmpl() (*asset, error) {
	bytes, err := typeDefaultTypeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/default/type.tmpl", size: 2714, mode: os.FileMode(420), modTime: time.Unix(1488486407, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"property/default/config.hcl": propertyDefaultConfigHcl,
	"property/default/field.tmpl": propertyDefaultFieldTmpl,
	"property/default/method.tmpl": propertyDefaultMethodTmpl,
	"type/default/config.hcl": typeDefaultConfigHcl,
	"type/default/type.tmpl": typeDefaultTypeTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"property": &bintree{nil, map[string]*bintree{
		"default": &bintree{nil, map[string]*bintree{
			"config.hcl": &bintree{propertyDefaultConfigHcl, map[string]*bintree{}},
			"field.tmpl": &bintree{propertyDefaultFieldTmpl, map[string]*bintree{}},
			"method.tmpl": &bintree{propertyDefaultMethodTmpl, map[string]*bintree{}},
		}},
	}},
	"type": &bintree{nil, map[string]*bintree{
		"default": &bintree{nil, map[string]*bintree{
			"config.hcl": &bintree{typeDefaultConfigHcl, map[string]*bintree{}},
			"type.tmpl": &bintree{typeDefaultTypeTmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

