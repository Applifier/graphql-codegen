// Code generated by go-bindata.
// sources:
// property/default/config.hcl
// property/default/field.tmpl
// property/default/method.tmpl
// type/default/config.hcl
// type/default/type.tmpl
// DO NOT EDIT!

package template

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _propertyDefaultConfigHcl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\xcb\x4c\xcd\x49\x51\xb0\x55\x50\x02\x33\xf4\x4a\x72\x0b\x72\x94\xb8\x72\x53\x4b\x32\xf2\xc1\xa2\x10\x16\x54\x18\x10\x00\x00\xff\xff\xda\x37\xa8\x72\x2c\x00\x00\x00")

func propertyDefaultConfigHclBytes() ([]byte, error) {
	return bindataRead(
		_propertyDefaultConfigHcl,
		"property/default/config.hcl",
	)
}

func propertyDefaultConfigHcl() (*asset, error) {
	bytes, err := propertyDefaultConfigHclBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "property/default/config.hcl", size: 44, mode: os.FileMode(420), modTime: time.Unix(1488374780, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _propertyDefaultFieldTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x4e\x4e\x2c\xc8\x2c\x49\xcc\xc9\xac\x4a\x55\xd0\x73\xcb\x4c\xcd\x49\xf1\x4b\xcc\x4d\xad\xad\x55\xa8\xae\x86\x70\x43\x2a\x0b\x40\xdc\x84\xac\xe2\xfc\x3c\x2b\x25\x98\x28\x44\x91\x52\x02\x17\x20\x00\x00\xff\xff\xde\x27\x34\xad\x41\x00\x00\x00")

func propertyDefaultFieldTmplBytes() ([]byte, error) {
	return bindataRead(
		_propertyDefaultFieldTmpl,
		"property/default/field.tmpl",
	)
}

func propertyDefaultFieldTmpl() (*asset, error) {
	bytes, err := propertyDefaultFieldTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "property/default/field.tmpl", size: 65, mode: os.FileMode(420), modTime: time.Unix(1488402499, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _propertyDefaultMethodTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\xce\x4c\x53\x48\x2d\x54\xd0\x0b\xa9\x2c\x48\xf5\xce\xcc\x4b\x51\x50\xf2\x77\xf2\x72\x75\x0e\x51\xaa\xad\xe5\x4a\x2b\xcd\x4b\x56\xd0\x28\x52\xd0\xaa\xae\x06\xcb\xfb\x25\xe6\xa6\xd6\xd6\x06\xa5\x16\xe7\xe7\x94\xa5\x16\x69\x2a\x54\x57\x27\x27\x16\x64\x96\x24\xe6\x64\x56\xa5\x2a\xe8\xf9\xa6\x96\x64\xe4\xa7\x40\xd4\x68\x80\x24\xa1\x22\x41\xa9\x25\xa5\x45\x79\x20\xfd\xb5\xb5\x0a\xd5\x5c\x0a\x0a\x45\x60\x01\x85\x22\x3d\x14\x63\xf5\xb0\x99\x06\xd1\x0b\x74\x4a\x2d\x57\x75\x75\x6a\x5e\x4a\x2d\x88\xc6\x70\xb1\xa7\x5f\x88\x6b\x90\x9b\xa3\xb3\xab\x12\x58\x9e\x54\x47\xc1\x8d\x06\x04\x00\x00\xff\xff\x0c\x1b\x8f\x3d\x0d\x01\x00\x00")

func propertyDefaultMethodTmplBytes() ([]byte, error) {
	return bindataRead(
		_propertyDefaultMethodTmpl,
		"property/default/method.tmpl",
	)
}

func propertyDefaultMethodTmpl() (*asset, error) {
	bytes, err := propertyDefaultMethodTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "property/default/method.tmpl", size: 269, mode: os.FileMode(420), modTime: time.Unix(1488466827, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeDefaultConfigHcl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\xa9\x2c\x48\x55\xb0\x55\x50\x02\xd1\x7a\x25\xb9\x05\x39\x4a\x5c\x80\x00\x00\x00\xff\xff\x3a\x12\xfd\xa1\x13\x00\x00\x00")

func typeDefaultConfigHclBytes() ([]byte, error) {
	return bindataRead(
		_typeDefaultConfigHcl,
		"type/default/config.hcl",
	)
}

func typeDefaultConfigHcl() (*asset, error) {
	bytes, err := typeDefaultConfigHclBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/default/config.hcl", size: 19, mode: os.FileMode(420), modTime: time.Unix(1488404377, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeDefaultTypeTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x55\x5d\x6f\xd3\x30\x14\x7d\xc6\xbf\xe2\x12\x4d\x28\x99\x4a\xfa\x0e\xda\x03\xb4\x99\xd4\xa1\xa6\xd5\x48\x79\x41\x08\xb9\xc9\x6d\x6b\x96\xda\x99\xed\x4e\x2a\x21\xff\x1d\x3b\x49\x33\x67\xed\xf8\x10\x1a\x88\xa7\x26\xf7\x1c\x9f\x73\x7d\x8f\x53\x0f\x87\x90\x6c\x98\x82\x54\x64\x08\xe6\x77\x8d\x1c\x25\x52\x8d\x19\x2c\xf7\xb0\x96\xb4\xd8\xdc\xe6\x2f\x2d\x6a\x10\x62\xd8\xe3\x19\xc4\xb3\x04\xa2\xf1\x24\x79\x4e\x48\x41\xd3\x1b\xba\x46\x28\xcb\x70\x24\xf8\x8a\xad\xc3\x79\x53\xa9\xaa\xd7\x84\x10\xb6\x2d\x84\xd4\xe0\x93\xb2\x64\x2b\xc0\x5b\x08\xdf\x31\x9e\x81\x37\x7b\x7b\x15\x8d\x12\xaf\xaa\x08\x80\x87\xdc\xc8\x33\xbe\x1e\x7e\x51\x82\x7b\x86\x8a\x3c\xab\x91\xb2\x94\x94\x1b\xf1\x70\x52\xcb\xa8\xba\x68\xcb\x61\x0b\x37\xc4\x80\x3c\x2e\x6f\x1a\x36\xf4\x64\x5f\x60\x4c\xb7\xa6\xa9\xc3\xdb\x18\x55\x2a\x59\xa1\x99\xe0\x86\xa5\x4d\xe5\x01\x4f\x69\xb9\x4b\x35\x94\x6e\x1b\x97\x0c\xf3\xcc\x74\x51\x37\x70\x70\xaf\xc8\x91\xc9\x35\x2a\x91\xdf\xa1\x04\x79\x78\x58\x09\xd9\xa7\x9c\xb0\xec\x56\xf5\xac\xdd\x35\x95\xdd\x68\xdb\xcb\x14\xf5\x46\x74\xcd\x74\x43\x23\xab\x1d\x4f\xc1\x97\x70\x7e\x52\x3b\x80\x29\x95\x6a\x43\xf3\xab\xf7\xb3\xd8\x0f\xc0\xff\xf8\x69\xb9\xd7\x38\x00\x94\x52\x18\xd4\x7a\x4a\xd4\x3b\xc9\xc1\x86\x11\xb6\x6c\xff\x85\x0c\x7b\x7a\x01\xf9\x05\xab\x05\xdf\x3a\x66\x19\xd5\x14\x1a\xbb\xa0\xb1\x3b\x72\xeb\x16\xd4\xe4\x01\x9c\x72\xed\x36\xfa\x20\xf2\x49\x9c\x44\xd7\x97\x6f\x46\xd1\x1f\xa5\xce\xb8\x46\xb9\xa2\x29\xf6\x83\xef\x0f\xfb\x9f\x24\x5f\x96\x70\xa6\xdb\x02\xbc\xba\x80\x0e\x85\x3a\xfd\xa6\xd1\xb3\x42\x28\xc5\x96\x39\x5a\xb0\x66\xcd\x9d\x42\xf3\xfd\x38\xa9\x75\x82\x6e\x6a\x89\x30\x80\xab\x53\x55\xf6\xa0\x9c\x1f\x55\x0f\x4b\x06\xb0\x14\x22\x6f\xce\x0e\x40\x3a\x00\x71\x63\xad\x6d\x76\x8e\x41\xf8\x03\x85\x80\x3c\x83\xee\x24\xd4\x02\x46\xaa\x17\xf5\xe9\xcc\x17\xf1\x64\x16\x9f\xca\xfb\x49\x62\x80\x6f\x60\x46\x47\x0b\xa6\x69\xce\xbe\xf6\x4e\x4b\xf9\xff\x27\x74\xb4\xbb\xa7\x08\x2c\x8a\x17\x53\xaf\xfa\xc9\xa8\x7e\xeb\xe3\x75\x06\x64\x63\x33\xb7\x08\x49\x05\x57\xcd\x95\xd3\x8e\xfc\x8e\xe6\xbb\xc6\x26\xe2\xbb\xed\x07\xfb\xa6\xda\x0b\xc4\x59\x6e\x5e\x6a\xa2\x11\xba\xe8\x23\xbe\x77\x8f\x79\x01\xb9\xbf\x76\x1e\xff\x2f\x9a\x2f\x92\xcf\x7f\xf7\x12\x3a\x3c\x7d\x0f\x00\x00\xff\xff\xaf\x20\xc8\x33\xd0\x07\x00\x00")

func typeDefaultTypeTmplBytes() ([]byte, error) {
	return bindataRead(
		_typeDefaultTypeTmpl,
		"type/default/type.tmpl",
	)
}

func typeDefaultTypeTmpl() (*asset, error) {
	bytes, err := typeDefaultTypeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/default/type.tmpl", size: 2000, mode: os.FileMode(420), modTime: time.Unix(1488471251, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"property/default/config.hcl": propertyDefaultConfigHcl,
	"property/default/field.tmpl": propertyDefaultFieldTmpl,
	"property/default/method.tmpl": propertyDefaultMethodTmpl,
	"type/default/config.hcl": typeDefaultConfigHcl,
	"type/default/type.tmpl": typeDefaultTypeTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"property": &bintree{nil, map[string]*bintree{
		"default": &bintree{nil, map[string]*bintree{
			"config.hcl": &bintree{propertyDefaultConfigHcl, map[string]*bintree{}},
			"field.tmpl": &bintree{propertyDefaultFieldTmpl, map[string]*bintree{}},
			"method.tmpl": &bintree{propertyDefaultMethodTmpl, map[string]*bintree{}},
		}},
	}},
	"type": &bintree{nil, map[string]*bintree{
		"default": &bintree{nil, map[string]*bintree{
			"config.hcl": &bintree{typeDefaultConfigHcl, map[string]*bintree{}},
			"type.tmpl": &bintree{typeDefaultTypeTmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

