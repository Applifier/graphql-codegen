// Code generated by go-bindata.
// sources:
// property/default/config.hcl
// property/default/field.tmpl
// property/default/method.tmpl
// type/default/config.hcl
// type/default/type.tmpl
// DO NOT EDIT!

package template

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _propertyDefaultConfigHcl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\xcb\x4c\xcd\x49\x51\xb0\x55\x50\x02\x33\xf4\x4a\x72\x0b\x72\x94\xb8\x72\x53\x4b\x32\xf2\xc1\xa2\x10\x16\x54\x18\x10\x00\x00\xff\xff\xda\x37\xa8\x72\x2c\x00\x00\x00")

func propertyDefaultConfigHclBytes() ([]byte, error) {
	return bindataRead(
		_propertyDefaultConfigHcl,
		"property/default/config.hcl",
	)
}

func propertyDefaultConfigHcl() (*asset, error) {
	bytes, err := propertyDefaultConfigHclBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "property/default/config.hcl", size: 44, mode: os.FileMode(420), modTime: time.Unix(1488374780, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _propertyDefaultFieldTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x4e\x4e\x2c\xc8\x2c\x49\xcc\xc9\xac\x4a\x55\xd0\x73\xcb\x4c\xcd\x49\xf1\x4b\xcc\x4d\xad\xad\x55\xa8\xae\x86\x70\x43\x2a\x0b\x40\xdc\x84\xac\xe2\xfc\x3c\x2b\x25\x98\x28\x44\x91\x52\x02\x17\x20\x00\x00\xff\xff\xde\x27\x34\xad\x41\x00\x00\x00")

func propertyDefaultFieldTmplBytes() ([]byte, error) {
	return bindataRead(
		_propertyDefaultFieldTmpl,
		"property/default/field.tmpl",
	)
}

func propertyDefaultFieldTmpl() (*asset, error) {
	bytes, err := propertyDefaultFieldTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "property/default/field.tmpl", size: 65, mode: os.FileMode(420), modTime: time.Unix(1488402499, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _propertyDefaultMethodTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\xce\x4c\x53\x48\x2d\x54\xd0\x0b\xa9\x2c\x48\xf5\xce\xcc\x4b\x51\x50\xf2\x77\xf2\x72\x75\x0e\x51\xaa\xad\xe5\x4a\x2b\xcd\x4b\x56\xd0\x28\x52\xd0\xaa\xae\x06\xcb\xfb\x25\xe6\xa6\xd6\xd6\x06\xa5\x16\xe7\xe7\x94\xa5\x16\x69\x2a\x54\x57\x27\x27\x16\x64\x96\x24\xe6\x64\x56\xa5\x2a\xe8\xf9\xa6\x96\x64\xe4\xa7\x40\xd4\x68\x80\x24\xa1\x22\x41\xa9\x25\xa5\x45\x79\x20\xfd\xb5\xb5\x0a\xd5\x5c\x0a\x0a\x45\x60\x01\x85\x22\x3d\x14\x63\xf5\xb0\x99\x06\xd1\x0b\x74\x4a\x2d\x57\x75\x75\x6a\x5e\x4a\x2d\x88\xc6\x70\xb1\xa7\x5f\x88\x6b\x90\x9b\xa3\xb3\xab\x12\x58\x9e\x54\x47\xc1\x8d\x06\x04\x00\x00\xff\xff\x0c\x1b\x8f\x3d\x0d\x01\x00\x00")

func propertyDefaultMethodTmplBytes() ([]byte, error) {
	return bindataRead(
		_propertyDefaultMethodTmpl,
		"property/default/method.tmpl",
	)
}

func propertyDefaultMethodTmpl() (*asset, error) {
	bytes, err := propertyDefaultMethodTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "property/default/method.tmpl", size: 269, mode: os.FileMode(420), modTime: time.Unix(1488466827, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeDefaultConfigHcl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\xa9\x2c\x48\x55\xb0\x55\x50\x02\xd1\x7a\x25\xb9\x05\x39\x4a\x5c\x80\x00\x00\x00\xff\xff\x3a\x12\xfd\xa1\x13\x00\x00\x00")

func typeDefaultConfigHclBytes() ([]byte, error) {
	return bindataRead(
		_typeDefaultConfigHcl,
		"type/default/config.hcl",
	)
}

func typeDefaultConfigHcl() (*asset, error) {
	bytes, err := typeDefaultConfigHclBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/default/config.hcl", size: 19, mode: os.FileMode(420), modTime: time.Unix(1488404377, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeDefaultTypeTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x55\xdf\x6f\x9b\x30\x10\x7e\x9e\xff\x8a\x1b\xaa\x26\xa8\x32\xf2\xbe\xa9\x0f\x5b\x42\xa5\x74\x0a\x89\x3a\xb2\x97\x69\x9a\x1c\xb8\x24\x5e\x89\x4d\x6d\x53\x29\x63\xfc\xef\xb3\x81\x50\x68\x92\xfd\xd0\x14\x4d\x7d\x0a\xdc\x7d\xf7\x7d\xe7\xfb\x4c\x6e\x38\x84\x68\xc3\x14\xc4\x22\x41\x30\xbf\x6b\xe4\x28\x91\x6a\x4c\x60\xb9\x83\xb5\xa4\xd9\xe6\x3e\x7d\x6d\xb3\x26\x43\x0c\x7a\x3c\x83\x70\x16\x41\x30\x9e\x44\x2f\x09\xc9\x68\x7c\x47\xd7\x08\x45\xe1\x8f\x04\x5f\xb1\xb5\x3f\xaf\x23\x65\xf9\x96\x10\xc2\xb6\x99\x90\x1a\x5c\x52\x14\x6c\x05\x78\x0f\xfe\x07\xc6\x13\x70\x66\xef\x6f\x82\x51\xe4\x94\x25\x01\x70\x90\x1b\x7a\xc6\xd7\xc3\x6f\x4a\x70\xc7\x40\x91\x27\x55\xa6\x28\x24\xe5\x86\xdc\x9f\x54\x34\xaa\x0a\xda\xb0\xdf\xa4\x6b\xa0\x47\x4e\xd3\x9b\x86\x0d\x3c\xda\x65\x18\xd2\xad\x69\x6a\xff\x36\x46\x15\x4b\x96\x69\x26\xb8\x41\x69\x13\x79\x82\x53\x5a\xe6\xb1\x86\xa2\xdb\xc6\x35\xc3\x34\x31\x5d\x54\x0d\xec\xd5\x4b\x72\x20\x72\x8b\x4a\xa4\x0f\x28\x41\xee\x1f\x56\x42\xf6\x21\x47\x24\xdb\xaa\x9e\x74\xb7\xa6\xb4\x07\x6d\x7a\x99\xa2\xde\x88\xb6\x99\x76\x68\x64\x95\xf3\x18\x5c\x09\x97\x47\xb9\x3d\x98\x52\xa9\x36\x34\xbd\xf9\x38\x0b\x5d\x0f\xdc\xcf\x5f\x96\x3b\x8d\x03\x40\x29\x85\xc9\x5a\x4d\x89\x3a\x97\x1c\xac\x19\x7e\x83\x76\x5f\x49\xbf\xc7\xe7\x91\x3f\x90\x5a\xf0\x6d\x47\x2c\xa1\x9a\x42\x2d\xe7\xd5\x72\x07\x6a\x6d\x41\x05\x1e\xc0\x31\xd5\xf6\xa0\x4f\x2c\x9f\x84\x51\x70\x7b\xfd\x6e\x14\xfc\x93\xeb\x8c\x6b\x94\x2b\x1a\x63\xdf\xf8\xfe\xb0\xff\x8b\xf3\x45\x01\x17\xba\x09\xc0\x9b\x2b\x68\xb3\x50\xb9\x5f\x37\x7a\x91\x09\xa5\xd8\x32\x45\x9b\xac\x50\xf3\x4e\xa0\xfe\x7e\x3a\xae\xb5\x84\x5d\xd7\x22\x61\x12\x5d\x9e\xb2\xb4\x17\xe5\xf2\x20\xba\x2f\x19\xc0\x52\x88\xb4\xbe\x3b\x00\xf1\x00\xc4\x9d\x95\xb6\xde\x75\x04\xfc\x5f\x30\x78\xe4\x05\xb4\x37\xa1\x22\x30\x54\x3d\xab\x8f\x7b\xbe\x08\x27\xb3\xf0\x98\xdf\x67\xb1\x01\x7e\x80\x19\x1d\xcd\x98\xa6\x29\xfb\xde\xbb\x2d\xc5\xf3\x77\xe8\xe0\x74\xe7\x30\x2c\x08\x17\x53\xa7\xfc\xcd\xa8\xfe\xea\xe3\xed\x0c\xc8\xda\x66\xb6\x08\x89\x05\x57\xf5\xca\x69\x46\xfe\x40\xd3\xbc\x96\x09\x78\xbe\xfd\x64\xdf\x54\xb3\x40\x3a\xe5\xe6\xa5\x02\x1a\xa2\xab\x7e\xc6\x75\x1e\x73\x8e\x47\x1e\xd7\xce\xe9\xff\xa2\xf9\x22\xfa\x7a\xa6\x25\x34\xe1\x59\xae\x4f\x6c\xa2\xfd\xd3\xcf\x00\x00\x00\xff\xff\x78\x6a\xde\x17\xd5\x07\x00\x00")

func typeDefaultTypeTmplBytes() ([]byte, error) {
	return bindataRead(
		_typeDefaultTypeTmpl,
		"type/default/type.tmpl",
	)
}

func typeDefaultTypeTmpl() (*asset, error) {
	bytes, err := typeDefaultTypeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/default/type.tmpl", size: 2005, mode: os.FileMode(420), modTime: time.Unix(1488472023, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"property/default/config.hcl": propertyDefaultConfigHcl,
	"property/default/field.tmpl": propertyDefaultFieldTmpl,
	"property/default/method.tmpl": propertyDefaultMethodTmpl,
	"type/default/config.hcl": typeDefaultConfigHcl,
	"type/default/type.tmpl": typeDefaultTypeTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"property": &bintree{nil, map[string]*bintree{
		"default": &bintree{nil, map[string]*bintree{
			"config.hcl": &bintree{propertyDefaultConfigHcl, map[string]*bintree{}},
			"field.tmpl": &bintree{propertyDefaultFieldTmpl, map[string]*bintree{}},
			"method.tmpl": &bintree{propertyDefaultMethodTmpl, map[string]*bintree{}},
		}},
	}},
	"type": &bintree{nil, map[string]*bintree{
		"default": &bintree{nil, map[string]*bintree{
			"config.hcl": &bintree{typeDefaultConfigHcl, map[string]*bintree{}},
			"type.tmpl": &bintree{typeDefaultTypeTmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

