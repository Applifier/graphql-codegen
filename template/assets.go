// Code generated by go-bindata.
// sources:
// property/custom/config.hcl
// property/custom/field.tmpl
// property/custom/method.tmpl
// property/default/config.hcl
// property/default/field.tmpl
// property/default/method.tmpl
// property/http_resolver/config.hcl
// property/http_resolver/field.tmpl
// property/http_resolver/method.tmpl
// type/default/config.hcl
// type/default/type.tmpl
// DO NOT EDIT!

package template

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _propertyCustomConfigHcl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\xcb\x4c\xcd\x49\x51\xb0\x55\x50\x02\x33\xf4\x4a\x72\x0b\x72\x94\xb8\x72\x53\x4b\x32\xf2\xc1\xa2\x10\x16\x54\x18\x10\x00\x00\xff\xff\xda\x37\xa8\x72\x2c\x00\x00\x00")

func propertyCustomConfigHclBytes() ([]byte, error) {
	return bindataRead(
		_propertyCustomConfigHcl,
		"property/custom/config.hcl",
	)
}

func propertyCustomConfigHcl() (*asset, error) {
	bytes, err := propertyCustomConfigHclBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "property/custom/config.hcl", size: 44, mode: os.FileMode(420), modTime: time.Unix(1548904587, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _propertyCustomFieldTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x2e\x4a\xcc\x4b\x4f\x55\xd0\x0b\x49\xcd\x2d\xc8\x49\x2c\x49\x75\xce\xcf\x4b\xcb\x4c\xd7\x4b\xcb\x4c\xcd\x49\x29\xae\xad\xe5\x52\x50\xa8\xae\x4e\x4e\x2c\xc8\x2c\x49\xcc\xc9\xac\x4a\x55\x80\x48\xc4\xe7\x25\xe6\xa6\xd6\xd6\x2a\x54\x57\x43\xf9\x25\x95\x05\x20\x7e\x42\x56\x71\x7e\x9e\x95\x12\x5c\x18\xa2\x4c\x29\x81\xab\xba\x3a\x35\x2f\xa5\xb6\x96\x0b\x10\x00\x00\xff\xff\x68\x48\x08\x80\x6f\x00\x00\x00")

func propertyCustomFieldTmplBytes() ([]byte, error) {
	return bindataRead(
		_propertyCustomFieldTmpl,
		"property/custom/field.tmpl",
	)
}

func propertyCustomFieldTmpl() (*asset, error) {
	bytes, err := propertyCustomFieldTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "property/custom/field.tmpl", size: 111, mode: os.FileMode(420), modTime: time.Unix(1548904587, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _propertyCustomMethodTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func propertyCustomMethodTmplBytes() ([]byte, error) {
	return bindataRead(
		_propertyCustomMethodTmpl,
		"property/custom/method.tmpl",
	)
}

func propertyCustomMethodTmpl() (*asset, error) {
	bytes, err := propertyCustomMethodTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "property/custom/method.tmpl", size: 0, mode: os.FileMode(420), modTime: time.Unix(1548904587, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _propertyDefaultConfigHcl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\xcb\x4c\xcd\x49\x51\xb0\x55\x50\x02\x33\xf4\x4a\x72\x0b\x72\x94\xb8\x72\x53\x4b\x32\xf2\xc1\xa2\x10\x16\x54\x18\x10\x00\x00\xff\xff\xda\x37\xa8\x72\x2c\x00\x00\x00")

func propertyDefaultConfigHclBytes() ([]byte, error) {
	return bindataRead(
		_propertyDefaultConfigHcl,
		"property/default/config.hcl",
	)
}

func propertyDefaultConfigHcl() (*asset, error) {
	bytes, err := propertyDefaultConfigHclBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "property/default/config.hcl", size: 44, mode: os.FileMode(420), modTime: time.Unix(1548904587, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _propertyDefaultFieldTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd7\x57\xa8\xae\x4e\x4e\x2c\xc8\x2c\x49\xcc\xc9\xac\x4a\x55\xd0\x73\xcb\x4c\xcd\x49\xf1\x4b\xcc\x4d\xad\xad\x55\xa8\xae\x86\x70\x5d\x52\x8b\x93\x8b\x32\x0b\x4a\x32\xf3\xf3\x6a\x6b\xb9\x08\xab\x0f\xa9\x2c\x00\x71\x13\xb2\x8a\xf3\xf3\xac\x94\x60\xa2\x10\x45\x4a\x09\x5c\x80\x00\x00\x00\xff\xff\x1c\x2b\xdd\xa2\x74\x00\x00\x00")

func propertyDefaultFieldTmplBytes() ([]byte, error) {
	return bindataRead(
		_propertyDefaultFieldTmpl,
		"property/default/field.tmpl",
	)
}

func propertyDefaultFieldTmpl() (*asset, error) {
	bytes, err := propertyDefaultFieldTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "property/default/field.tmpl", size: 116, mode: os.FileMode(420), modTime: time.Unix(1548904587, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _propertyDefaultMethodTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x91\x41\x4f\xc2\x40\x10\x85\xef\xfd\x15\x2f\x8d\x07\xe0\x50\x3c\x9b\x78\x40\xc4\x44\x8d\x98\x10\xee\x66\xd3\x0e\x65\x93\xb2\xd4\xdd\x2d\x09\x0e\xf3\xdf\x4d\x77\x29\x05\xa3\x1e\xf5\xd8\xe9\xec\x9b\xf7\xbd\xc7\x8c\x82\x56\xda\x10\x52\x65\xcb\x66\x43\xc6\xbb\x14\x22\xca\x96\x0e\x23\xe7\x6d\x93\x7b\x4e\x00\x66\xab\x4c\x49\xc8\x44\x98\xb3\xb9\xda\x10\x0e\xc8\x55\xad\xbd\xaa\xf4\x07\x89\x80\x39\x5b\xee\x6b\x12\x09\xdb\x64\x0a\x91\x44\x98\x41\xa6\x80\x48\xc2\xdc\xdd\xb1\x94\x93\xde\x91\x4d\x5b\x29\xbd\x82\x76\x6f\x64\xbc\xdd\x23\x83\xc8\x82\xdc\xb6\xda\x91\x65\xa6\xca\x51\x38\x76\x31\x6c\x65\x3b\xf5\xf0\x9a\xde\x11\xee\x3e\x6b\x53\x20\x7d\xbd\x7b\x9a\x4d\x97\x69\xf8\x79\xb5\x56\x6e\xd2\x31\xe1\xe6\x16\xa5\xc7\x20\x7b\x21\xbf\xde\x16\xfd\xfc\x80\x8a\xcc\x10\xd7\x22\xc9\x78\x0c\xe6\x9e\x09\xc7\xdd\x16\x36\xf2\xc5\xef\x7b\x72\xb9\xd5\xb5\xd7\x5b\x23\x92\xac\x1a\x93\x63\x60\x31\x62\xf6\xb4\xa9\x2b\xe5\xcf\x11\xa3\xb7\xa8\x30\xfc\x45\x7d\x10\x58\x2e\x1c\xb7\x9c\xbd\xe2\x59\x39\x5f\x11\x4e\x81\x0c\x7b\x8f\x0b\xf2\x8d\x35\xb1\x0f\xc4\xfe\x2e\x92\xee\x5d\xd9\xb0\x09\xa3\xab\x2e\xf2\xe3\xc4\x66\xc7\x46\xe3\x5e\xf6\x9d\xf9\x78\xa6\x6f\xa4\x8d\xfd\xc7\x6e\x1e\xe7\xcb\xd9\xe2\x61\x32\x9d\xfd\x65\x3d\xff\x13\xf9\x29\x86\xcf\x00\x00\x00\xff\xff\xa5\x2d\xa9\x13\x5f\x03\x00\x00")

func propertyDefaultMethodTmplBytes() ([]byte, error) {
	return bindataRead(
		_propertyDefaultMethodTmpl,
		"property/default/method.tmpl",
	)
}

func propertyDefaultMethodTmpl() (*asset, error) {
	bytes, err := propertyDefaultMethodTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "property/default/method.tmpl", size: 863, mode: os.FileMode(420), modTime: time.Unix(1548904587, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _propertyHttp_resolverConfigHcl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xc8\x41\x0e\x84\x20\x0c\x05\xd0\x3d\xa7\x68\xfe\x7a\x32\x9c\x80\x93\x4c\x67\x25\x55\x30\xd0\x12\xe9\xfd\x63\x82\xee\x5e\xde\x5e\xa5\x65\x4a\x84\x85\xaf\xf7\xd1\x10\xba\x78\xb1\xb5\x8f\xde\xae\x7d\xd8\xe5\x93\x12\xfd\xc0\x50\xf1\x58\xdc\x07\x03\x1f\x02\x43\x74\xb3\x5c\xf5\x88\xe7\x34\x65\xe0\x1f\xee\x00\x00\x00\xff\xff\x59\x8a\x5b\x6d\x5c\x00\x00\x00")

func propertyHttp_resolverConfigHclBytes() ([]byte, error) {
	return bindataRead(
		_propertyHttp_resolverConfigHcl,
		"property/http_resolver/config.hcl",
	)
}

func propertyHttp_resolverConfigHcl() (*asset, error) {
	bytes, err := propertyHttp_resolverConfigHclBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "property/http_resolver/config.hcl", size: 92, mode: os.FileMode(420), modTime: time.Unix(1548904587, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _propertyHttp_resolverFieldTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x2e\x4a\xcc\x4b\x4f\x55\xd0\x0b\x49\xcd\x2d\xc8\x49\x2c\x49\x75\xce\xcf\x4b\xcb\x4c\xd7\x4b\xcb\x4c\xcd\x49\x29\xae\xad\xe5\x52\x50\xa8\xae\x4e\x4e\x2c\xc8\x2c\x49\xcc\xc9\xac\x4a\x55\x80\x48\xc4\xe7\x25\xe6\xa6\xd6\xd6\x2a\x54\x57\x43\xf9\x25\x95\x05\x20\x7e\x42\x56\x71\x7e\x9e\x95\x12\x5c\x18\xa2\x4c\x29\x81\xab\xba\x3a\x35\x2f\xa5\xb6\x96\x0b\x10\x00\x00\xff\xff\x68\x48\x08\x80\x6f\x00\x00\x00")

func propertyHttp_resolverFieldTmplBytes() ([]byte, error) {
	return bindataRead(
		_propertyHttp_resolverFieldTmpl,
		"property/http_resolver/field.tmpl",
	)
}

func propertyHttp_resolverFieldTmpl() (*asset, error) {
	bytes, err := propertyHttp_resolverFieldTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "property/http_resolver/field.tmpl", size: 111, mode: os.FileMode(420), modTime: time.Unix(1548904587, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _propertyHttp_resolverMethodTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x91\x41\x6f\xd4\x30\x10\x85\xcf\xf8\x57\x3c\x56\x08\x25\x15\x72\x39\x23\xed\x01\x5a\x89\x13\x3d\x54\xbd\x57\x21\x99\x64\x8d\xbc\x76\x34\x76\x16\x2d\xd3\xf9\xef\xc8\x4e\x77\xb7\x45\xa8\xb7\x78\xf2\xfc\xde\xfb\xc6\x22\x18\x68\x74\x81\xb0\xe9\x78\x5a\xf6\x14\x72\xda\x40\xb5\xe3\x29\xe1\x2a\x65\x5e\xfa\x2c\x06\x10\xe1\x2e\x4c\x04\xab\x2a\x62\xef\xba\x3d\xe1\x09\x7d\x37\xbb\xdc\x79\xf7\x87\x54\x21\x62\x1f\x8e\x33\xa9\x56\x35\x85\x41\xd5\xa8\x08\x28\x0c\x50\x35\x22\xa7\x1c\xa6\x9e\xdc\x81\x78\x53\xac\xdc\x08\x97\x1e\x29\x64\x3e\xc2\x42\xf5\x9e\x52\xf4\x07\x62\x11\xf2\x89\x6a\xd8\xab\x61\xb1\x3d\xb9\x8b\x7c\xd8\x75\xe9\xeb\xa9\x36\xbe\x6c\x31\x65\x34\xf6\x07\xe5\x5d\x1c\x2e\xf3\x27\x78\x0a\x2d\x3e\xab\x9a\xeb\x6b\x88\x5c\x6a\xe3\x59\x5b\x78\x56\x84\xf5\x7c\x4b\xa9\x67\x37\x67\x17\x83\xaa\x19\x97\xd0\xa3\x61\x5c\x89\x64\xda\xcf\xbe\xcb\x2f\x29\x50\xb1\x57\x87\xf6\x0d\xf7\xa6\xc2\xbe\x6a\x5c\x50\x2e\x8e\x2f\xf6\xff\x2f\xc2\x99\xb9\x45\x73\x2e\x79\x4f\x79\xe1\xb0\xee\xfc\x13\x88\x39\x72\x8b\xf2\x56\x87\x8e\xc1\x94\x16\x9f\xf1\x5f\xb1\x41\xf9\x3d\xd7\x3b\x65\x69\xbb\x9c\x67\xfb\x9d\x72\x23\x92\x96\x9f\x8f\xe7\x46\xf6\xe1\xf9\xeb\x26\x86\xd1\x4d\x76\x61\x5f\xde\xbf\x35\x80\x1b\xeb\xe5\xf7\x5b\x04\xe7\x6b\xe8\x3b\xae\x09\xe5\x5c\x8d\x0d\x50\x82\x06\x1a\xa9\xb6\x99\xed\xb7\x38\x1c\xed\x8d\x8f\x89\x9a\xd6\x18\x54\x83\x2d\x7e\xa5\x18\xec\x1d\xfd\xbe\xa5\x3e\x0e\xc4\xcd\x59\xda\xda\x75\xd4\x7c\x5c\x59\xda\x5a\xbb\x66\xac\x83\x35\x46\xcd\xdf\x00\x00\x00\xff\xff\x98\x78\x89\x36\xc3\x02\x00\x00")

func propertyHttp_resolverMethodTmplBytes() ([]byte, error) {
	return bindataRead(
		_propertyHttp_resolverMethodTmpl,
		"property/http_resolver/method.tmpl",
	)
}

func propertyHttp_resolverMethodTmpl() (*asset, error) {
	bytes, err := propertyHttp_resolverMethodTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "property/http_resolver/method.tmpl", size: 707, mode: os.FileMode(420), modTime: time.Unix(1548904587, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeDefaultConfigHcl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\xb0\x55\x50\x02\xd1\x7a\x25\xb9\x05\x39\x4a\x5c\x80\x00\x00\x00\xff\xff\x3a\x12\xfd\xa1\x13\x00\x00\x00")

func typeDefaultConfigHclBytes() ([]byte, error) {
	return bindataRead(
		_typeDefaultConfigHcl,
		"type/default/config.hcl",
	)
}

func typeDefaultConfigHcl() (*asset, error) {
	bytes, err := typeDefaultConfigHclBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/default/config.hcl", size: 19, mode: os.FileMode(420), modTime: time.Unix(1548904587, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeDefaultTypeTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x56\xd1\x6e\xea\x46\x10\x7d\xae\xbf\x62\x6a\x45\x95\x1d\x51\xfb\xbd\x55\x1e\x52\xe2\x54\xa4\x09\xa4\x60\xf2\xd2\x54\xd1\x62\x0f\x66\x1b\xb3\xeb\xec\xae\x23\x51\xd7\xff\x5e\xd9\x6b\xcc\x1a\x4c\xb8\xd1\x4d\x74\x75\xdf\x60\x66\x76\xce\xd9\x3d\x33\x1c\x7c\x1f\xc2\x15\x95\x10\xf1\x18\x81\x4a\x48\x90\xa1\x40\xa2\x30\x86\xc5\x06\x12\x41\xb2\xd5\x4b\xfa\x73\x95\x4d\x90\x59\xbe\x0f\x57\x13\x18\x4f\x42\x08\xae\x46\xe1\x8f\x96\x95\x91\xe8\x99\x24\x08\x45\xe1\x0d\x39\x5b\xd2\xc4\xbb\xd7\x91\xb2\xfc\xd5\xb2\x2c\xba\xce\xb8\x50\xe0\x58\x45\x41\x97\x80\x2f\xe0\xfd\x41\x59\x0c\xf6\xe4\xb7\x9b\x60\x18\xda\x65\x69\x01\xd4\x29\xc6\x15\x38\x54\x3e\x21\x53\x62\x03\x5e\xb8\xc9\x70\x4c\xd6\xe8\xc2\x7e\x09\x8b\xd2\x3c\x46\xf9\x24\x95\xa0\x2c\x01\x6f\x54\x23\x48\xb0\x1f\x6d\x64\x11\x8f\x29\x4b\xfc\x7f\x24\x67\x8f\xb6\xed\x96\x65\x37\x66\x17\x05\xb2\xb8\xe9\xa8\x3f\x99\x11\x41\x58\x82\x6d\xc7\x3a\x58\x85\xbd\xce\x01\xf7\xf8\x55\x4e\x5e\xc4\xf7\xab\x76\xdb\x50\x59\x6e\xbf\x5d\xa1\x8c\x04\xcd\x14\xe5\xac\x2c\x2d\xb5\xc9\x70\xaf\x4e\x2a\x91\x47\x0a\x0a\x93\xe6\x35\xc5\x34\x96\x65\x59\x13\xdc\xb2\x2b\xad\x03\x90\x29\x4a\x9e\xbe\xa2\x00\xb1\xfd\xb0\xe4\xa2\x5b\xd2\x03\xd9\x9e\xea\x40\x9b\x67\x76\x6f\xd7\x52\xba\x43\xb5\xe2\x2d\x27\x23\x7f\xe2\x5d\x96\x39\x8b\xc0\x11\x70\xde\x4b\xc1\x85\x3b\x22\xe4\x8a\xa4\x37\xb3\xc9\xd8\x71\xc1\xf9\xeb\xef\xc5\x46\xe1\x00\x50\x08\x2e\xdc\x9a\x9a\x40\x95\x0b\x06\x95\xc8\x5e\x53\xed\xfc\x24\xbc\x4e\x3f\xb7\x7a\x9d\x53\x50\x73\xb6\x36\xc0\x62\xa2\x08\x68\x38\x57\xc3\x1d\xa0\xb5\x07\xea\xe2\x01\xf4\xa1\xee\x0f\xdb\xfe\x08\x8d\xc6\x61\x30\xbd\xbe\x1c\x06\xf6\xd7\x0c\x09\x65\x0a\xc5\x92\x44\xd8\x9d\x93\xae\x28\xdf\x68\x50\xe0\x4c\x35\x01\xf8\xe5\x62\xa7\x3e\x18\xd3\x73\x96\x71\x29\xe9\x22\xc5\x2a\x59\x57\xdd\x1b\x01\xbd\x8e\x86\x7a\x6d\x43\x53\xbd\x90\x17\x45\xa7\x4f\x59\x56\x03\x73\x7e\x10\xdd\x1e\x19\xc0\x82\xf3\x54\xcf\x10\x40\x34\x00\xfe\x5c\x41\x57\x1a\x1a\x00\xde\x1b\x1d\x5c\xeb\x07\x68\x27\xa2\x6e\x60\x01\x74\xa4\xee\xd7\x7c\x3e\x1e\x4d\xc6\x7d\x7a\x7f\x8a\x0c\xf0\x1f\xe4\x2c\x22\x19\x55\x24\xa5\xff\x76\xa6\xa5\xf8\xfe\x15\x3a\xb8\xdd\x67\x08\x16\x8c\xe7\x77\xfa\x57\xfe\xcd\xa7\xd2\x49\x63\x59\xdb\x1a\x33\xf6\xde\x3d\x37\xde\x12\xb4\xf3\x59\x11\x67\x52\x3b\x6b\xa3\xce\x2b\x49\x73\xcd\x28\x60\xf9\xfa\xa1\xfa\xa6\x35\xa9\x91\x8c\x0e\x45\xa1\x6b\x6b\xcc\x7d\xba\x8d\xd9\xf5\x97\x5f\x74\x33\x8e\xbd\xcb\xd9\xae\x65\x5a\xe4\xb1\x1f\xba\xfb\x79\xf8\xb4\x73\xcc\x0f\x35\xc4\x11\xcb\x72\x75\xc4\x15\x8f\x11\x9a\x06\xb3\xc9\xed\x43\x30\xfd\x18\x32\xc7\x71\x66\xc3\xcb\xdb\xcb\x5e\x94\x76\x71\xbf\x10\xad\x6f\xd1\xb5\xf2\xdd\x8d\x3e\xe9\x74\xa3\x75\x96\xe2\x1a\x99\x92\xbf\x57\x7f\xf2\xfe\xbc\xad\x8a\x1c\x56\x0d\xb2\x9e\x30\xb7\xde\xbc\x66\xf1\x9a\x7d\x59\x92\x54\xe2\xbb\x7c\xb4\x69\xee\xd0\x4a\x1d\x93\xa3\x69\xa8\xbe\x0f\xb3\x88\xa4\x44\x48\x60\x88\x31\x28\x0e\x0b\x04\xba\x65\x88\x31\xac\x09\xcb\x49\x9a\x6e\x2a\xf7\xf5\xf4\x7d\x2f\xa0\xee\xb9\xf3\x63\x46\x53\xcb\x58\xe0\xff\x03\x00\x00\xff\xff\xf0\x2a\xe7\xfa\xda\x0a\x00\x00")

func typeDefaultTypeTmplBytes() ([]byte, error) {
	return bindataRead(
		_typeDefaultTypeTmpl,
		"type/default/type.tmpl",
	)
}

func typeDefaultTypeTmpl() (*asset, error) {
	bytes, err := typeDefaultTypeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/default/type.tmpl", size: 2778, mode: os.FileMode(420), modTime: time.Unix(1548904587, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"property/custom/config.hcl": propertyCustomConfigHcl,
	"property/custom/field.tmpl": propertyCustomFieldTmpl,
	"property/custom/method.tmpl": propertyCustomMethodTmpl,
	"property/default/config.hcl": propertyDefaultConfigHcl,
	"property/default/field.tmpl": propertyDefaultFieldTmpl,
	"property/default/method.tmpl": propertyDefaultMethodTmpl,
	"property/http_resolver/config.hcl": propertyHttp_resolverConfigHcl,
	"property/http_resolver/field.tmpl": propertyHttp_resolverFieldTmpl,
	"property/http_resolver/method.tmpl": propertyHttp_resolverMethodTmpl,
	"type/default/config.hcl": typeDefaultConfigHcl,
	"type/default/type.tmpl": typeDefaultTypeTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"property": &bintree{nil, map[string]*bintree{
		"custom": &bintree{nil, map[string]*bintree{
			"config.hcl": &bintree{propertyCustomConfigHcl, map[string]*bintree{}},
			"field.tmpl": &bintree{propertyCustomFieldTmpl, map[string]*bintree{}},
			"method.tmpl": &bintree{propertyCustomMethodTmpl, map[string]*bintree{}},
		}},
		"default": &bintree{nil, map[string]*bintree{
			"config.hcl": &bintree{propertyDefaultConfigHcl, map[string]*bintree{}},
			"field.tmpl": &bintree{propertyDefaultFieldTmpl, map[string]*bintree{}},
			"method.tmpl": &bintree{propertyDefaultMethodTmpl, map[string]*bintree{}},
		}},
		"http_resolver": &bintree{nil, map[string]*bintree{
			"config.hcl": &bintree{propertyHttp_resolverConfigHcl, map[string]*bintree{}},
			"field.tmpl": &bintree{propertyHttp_resolverFieldTmpl, map[string]*bintree{}},
			"method.tmpl": &bintree{propertyHttp_resolverMethodTmpl, map[string]*bintree{}},
		}},
	}},
	"type": &bintree{nil, map[string]*bintree{
		"default": &bintree{nil, map[string]*bintree{
			"config.hcl": &bintree{typeDefaultConfigHcl, map[string]*bintree{}},
			"type.tmpl": &bintree{typeDefaultTypeTmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

