// Code generated by go-bindata.
// sources:
// property/custom/config.hcl
// property/custom/field.tmpl
// property/custom/method.tmpl
// property/default/config.hcl
// property/default/field.tmpl
// property/default/method.tmpl
// property/http_resolver/config.hcl
// property/http_resolver/field.tmpl
// property/http_resolver/method.tmpl
// type/default/config.hcl
// type/default/type.tmpl
// DO NOT EDIT!

package template

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _propertyCustomConfigHcl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\xcb\x4c\xcd\x49\x51\xb0\x55\x50\x02\x33\xf4\x4a\x72\x0b\x72\x94\xb8\x72\x53\x4b\x32\xf2\xc1\xa2\x10\x16\x54\x18\x10\x00\x00\xff\xff\xda\x37\xa8\x72\x2c\x00\x00\x00")

func propertyCustomConfigHclBytes() ([]byte, error) {
	return bindataRead(
		_propertyCustomConfigHcl,
		"property/custom/config.hcl",
	)
}

func propertyCustomConfigHcl() (*asset, error) {
	bytes, err := propertyCustomConfigHclBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "property/custom/config.hcl", size: 44, mode: os.FileMode(420), modTime: time.Unix(1488801363, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _propertyCustomFieldTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x2e\x4a\xcc\x4b\x4f\x55\xd0\x0b\x49\xcd\x2d\xc8\x49\x2c\x49\x75\xce\xcf\x4b\xcb\x4c\xd7\x4b\xcb\x4c\xcd\x49\x29\xae\xad\xe5\x52\x50\xa8\xae\x4e\x4e\x2c\xc8\x2c\x49\xcc\xc9\xac\x02\xaa\x03\x4b\xc4\xe7\x25\xe6\xa6\xd6\xd6\x02\xa5\xa0\xfc\x92\xca\x02\x10\x3f\x21\xab\x38\x3f\xcf\x4a\x09\x2e\x0c\x51\xa6\x94\xc0\x55\x5d\x9d\x9a\x97\x02\x34\x0d\x10\x00\x00\xff\xff\x68\x48\x08\x80\x6f\x00\x00\x00")

func propertyCustomFieldTmplBytes() ([]byte, error) {
	return bindataRead(
		_propertyCustomFieldTmpl,
		"property/custom/field.tmpl",
	)
}

func propertyCustomFieldTmpl() (*asset, error) {
	bytes, err := propertyCustomFieldTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "property/custom/field.tmpl", size: 111, mode: os.FileMode(420), modTime: time.Unix(1488801393, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _propertyCustomMethodTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func propertyCustomMethodTmplBytes() ([]byte, error) {
	return bindataRead(
		_propertyCustomMethodTmpl,
		"property/custom/method.tmpl",
	)
}

func propertyCustomMethodTmpl() (*asset, error) {
	bytes, err := propertyCustomMethodTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "property/custom/method.tmpl", size: 0, mode: os.FileMode(420), modTime: time.Unix(1488801374, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _propertyDefaultConfigHcl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\xcb\x4c\xcd\x49\x51\xb0\x55\x50\x02\x33\xf4\x4a\x72\x0b\x72\x94\xb8\x72\x53\x4b\x32\xf2\xc1\xa2\x10\x16\x54\x18\x10\x00\x00\xff\xff\xda\x37\xa8\x72\x2c\x00\x00\x00")

func propertyDefaultConfigHclBytes() ([]byte, error) {
	return bindataRead(
		_propertyDefaultConfigHcl,
		"property/default/config.hcl",
	)
}

func propertyDefaultConfigHcl() (*asset, error) {
	bytes, err := propertyDefaultConfigHclBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "property/default/config.hcl", size: 44, mode: os.FileMode(420), modTime: time.Unix(1488374780, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _propertyDefaultFieldTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\xd7\x57\xa8\xae\x4e\x4e\x2c\xc8\x2c\x49\xcc\xc9\xac\x4a\x55\xd0\x73\xcb\x4c\xcd\x49\xf1\x4b\xcc\x4d\xad\xad\x05\xca\x40\xb8\x2e\xa9\xc5\xc9\x45\x99\x05\x25\x99\xf9\x79\xb5\xb5\x5c\x84\xd5\x87\x54\x16\x80\xb8\x09\x59\xc5\xf9\x79\x56\x4a\x30\x51\x88\x22\xa5\x04\x2e\x40\x00\x00\x00\xff\xff\x1c\x2b\xdd\xa2\x74\x00\x00\x00")

func propertyDefaultFieldTmplBytes() ([]byte, error) {
	return bindataRead(
		_propertyDefaultFieldTmpl,
		"property/default/field.tmpl",
	)
}

func propertyDefaultFieldTmpl() (*asset, error) {
	bytes, err := propertyDefaultFieldTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "property/default/field.tmpl", size: 116, mode: os.FileMode(420), modTime: time.Unix(1488485204, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _propertyDefaultMethodTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x51\xcb\x4e\xeb\x30\x10\xdd\xf7\x2b\x46\xd1\x5d\xb4\x5d\xb8\x77\x8d\xc4\xa2\x94\x22\x01\xa2\x48\x55\xf7\xc8\x4a\x27\xa9\x25\xc7\x09\xb6\x83\x54\x5c\xff\x3b\x13\x3b\xa9\x1b\x04\x2c\x61\xe7\xc7\x99\x33\xe7\xe1\x1c\xec\xb1\x10\x0a\x21\xe3\xba\x6c\x2b\x54\xd6\x64\xe0\x3d\x5d\x0c\xcc\x8d\xd5\x6d\x6e\xdd\x04\xc0\x39\xcd\x55\x89\xc0\xbc\x77\x8e\x6d\x78\x85\x70\x82\x9c\x37\xc2\x72\x29\xde\xd1\x7b\x42\xb0\xdd\xb1\xa1\x53\x40\xa3\xda\xd3\x89\xb0\x40\x27\xe2\x9b\x38\x37\xec\xd1\x98\xa3\x78\x43\x9d\x75\x54\xa2\x00\x61\x5e\x68\xab\x3e\x02\x23\xdc\x16\x4d\x2d\xe9\x93\x18\xa4\xc1\xb0\x6c\xf4\xd8\xd1\x0e\xec\x61\x1a\x5f\x21\xec\x7d\x14\xb4\x27\x7b\xbe\x79\x58\xaf\x76\x59\xf8\xfc\x77\xe0\x66\x39\x78\x82\xab\x6b\x28\x2d\x4c\xd9\x13\xda\x43\xbd\x4f\xef\x27\x90\xa8\x66\xf0\x9f\x46\x16\x0b\x12\x9e\x3c\x41\x8f\xed\xcc\x46\x7f\xf1\x7e\x8b\x26\xd7\xa2\xb1\xa2\x56\x34\x54\xb4\x2a\x87\xa9\x86\xb9\x73\x16\xab\x46\x72\x7b\x69\x31\x6a\x8b\x0c\xb3\x1f\xd8\xa7\xc1\xcb\x48\x71\xe7\x33\x31\x5e\x94\xf3\xd9\xc2\x39\x90\x59\xd2\xb8\x45\xdb\x6a\x15\xfb\x80\xd8\xdf\x28\xe9\xa4\x4a\x07\x24\x28\x21\x87\xc8\xfb\x17\xcd\xfa\x46\x23\x8e\x7d\x25\x3e\xae\x49\x8d\x74\xb1\x7f\xdb\xcd\xfd\x66\xb7\xde\xde\x2d\x57\xeb\xdf\xac\xe7\x6f\x22\x3f\xc7\xf0\x11\x00\x00\xff\xff\xa5\x2d\xa9\x13\x5f\x03\x00\x00")

func propertyDefaultMethodTmplBytes() ([]byte, error) {
	return bindataRead(
		_propertyDefaultMethodTmpl,
		"property/default/method.tmpl",
	)
}

func propertyDefaultMethodTmpl() (*asset, error) {
	bytes, err := propertyDefaultMethodTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "property/default/method.tmpl", size: 863, mode: os.FileMode(420), modTime: time.Unix(1488485204, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _propertyHttp_resolverConfigHcl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\xcb\x4c\xcd\x49\x51\xb0\x55\x50\x02\x33\xf4\x4a\x72\x0b\x72\x94\xb8\x72\x53\x4b\x32\xf2\xc1\xa2\x10\x16\x54\x38\x33\xb7\x20\xbf\xa8\xa4\x18\x28\x1e\xad\x14\xa3\x94\x97\x5a\xa2\x9f\x51\x52\x52\x10\xa3\xa4\xa4\xa3\x00\xe4\xa7\xe6\x25\xe7\xa7\x64\xe6\xa5\xeb\x67\x15\xe7\xe7\x01\x05\x63\xb9\x00\x01\x00\x00\xff\xff\x59\x8a\x5b\x6d\x5c\x00\x00\x00")

func propertyHttp_resolverConfigHclBytes() ([]byte, error) {
	return bindataRead(
		_propertyHttp_resolverConfigHcl,
		"property/http_resolver/config.hcl",
	)
}

func propertyHttp_resolverConfigHcl() (*asset, error) {
	bytes, err := propertyHttp_resolverConfigHclBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "property/http_resolver/config.hcl", size: 92, mode: os.FileMode(420), modTime: time.Unix(1488545767, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _propertyHttp_resolverFieldTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x2e\x4a\xcc\x4b\x4f\x55\xd0\x0b\x49\xcd\x2d\xc8\x49\x2c\x49\x75\xce\xcf\x4b\xcb\x4c\xd7\x4b\xcb\x4c\xcd\x49\x29\xae\xad\xe5\x52\x50\xa8\xae\x4e\x4e\x2c\xc8\x2c\x49\xcc\xc9\xac\x02\xaa\x03\x4b\xc4\xe7\x25\xe6\xa6\xd6\xd6\x02\xa5\xa0\xfc\x92\xca\x02\x10\x3f\x21\xab\x38\x3f\xcf\x4a\x09\x2e\x0c\x51\xa6\x94\xc0\x55\x5d\x9d\x9a\x97\x02\x34\x0d\x10\x00\x00\xff\xff\x68\x48\x08\x80\x6f\x00\x00\x00")

func propertyHttp_resolverFieldTmplBytes() ([]byte, error) {
	return bindataRead(
		_propertyHttp_resolverFieldTmpl,
		"property/http_resolver/field.tmpl",
	)
}

func propertyHttp_resolverFieldTmpl() (*asset, error) {
	bytes, err := propertyHttp_resolverFieldTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "property/http_resolver/field.tmpl", size: 111, mode: os.FileMode(420), modTime: time.Unix(1488552731, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _propertyHttp_resolverMethodTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x51\xcd\x8e\xda\x30\x10\x3e\x37\x4f\x31\x45\x55\x95\xa0\xca\xf4\x5c\x89\x43\x0b\x52\x4f\xe5\x80\xb8\x23\x37\x99\x04\x57\xc6\x8e\xc6\x0e\x15\x6b\xf2\xee\x3b\xb6\x21\xc0\x6a\xb5\xb7\xf1\xcc\x37\xdf\xcf\x38\x04\x68\xb0\x55\x06\x61\x26\xa9\x1b\x8e\x68\xbc\x9b\xc1\x38\xf2\xc3\xc1\xdc\x79\x1a\x6a\x1f\x0a\x80\x10\x48\x9a\x0e\x41\x8c\x63\x08\x62\x23\x8f\x08\x17\xa8\x65\xaf\xbc\xd4\xea\x05\xc7\x91\x11\x62\x77\xee\xb9\x4a\x68\x34\x0d\x57\x8c\x05\xae\x98\xaf\x08\xe1\xa6\x43\x58\xa3\x3a\x21\xcd\x22\x95\x6a\x41\xb9\x3d\xab\xd2\x19\x04\xe3\xb6\xe8\xac\xe6\x21\x33\x68\x87\x49\xec\xa9\x19\x69\x6f\xec\x21\x7c\x39\x48\xf7\xf3\x66\x1b\x7e\x2c\xa1\xf3\x50\x8a\x3f\xe8\x0f\xb6\xb9\xf7\x2f\xa0\xd1\x54\xf0\x9d\x57\x16\x0b\xf6\x76\xb7\x0d\x57\x6c\xcc\x93\x23\xe4\xf7\x1a\x5d\x4d\xaa\xf7\xca\x1a\x5e\x6a\x07\x53\x43\x49\x30\x0f\xc1\xe3\xb1\xd7\xd2\x3f\xa6\x80\x14\x3b\x33\x54\x1f\xb0\x97\x29\xec\x93\xe3\x18\xe5\xce\xf8\x70\xff\xb7\x11\xa6\xcc\x15\x94\x93\xc9\x2d\xfa\x81\x4c\xbe\xf9\x37\x40\x22\x4b\xac\xcf\xd7\x3f\x49\x02\x42\x37\x68\x0f\xef\x82\x19\xc2\xe3\x3e\xed\xc4\xa3\x1d\xbc\xef\xc5\x6f\xf4\x4c\xed\x86\xbf\xfb\xc9\x91\xd8\x5d\xab\x95\x35\xad\xea\xc4\x40\x3a\xfe\x7f\xc5\xfb\x9c\x24\x2e\x7f\x5e\x82\x51\x3a\x89\x7e\xa2\xa4\x10\xdf\x89\x98\x5b\x51\x88\x3f\x1d\x93\x9b\x5e\xfc\xb2\xcd\x59\xac\xb4\x75\x58\x56\x05\x8f\x22\xc1\x12\xfe\x39\x6b\xc4\x06\xff\xaf\xb1\xb6\x0d\x52\x39\x41\x2b\x91\x5b\xe5\xd7\x9c\xa5\x4a\xb6\x93\x46\x6e\x64\x99\xb1\x78\x0d\x00\x00\xff\xff\x98\x78\x89\x36\xc3\x02\x00\x00")

func propertyHttp_resolverMethodTmplBytes() ([]byte, error) {
	return bindataRead(
		_propertyHttp_resolverMethodTmpl,
		"property/http_resolver/method.tmpl",
	)
}

func propertyHttp_resolverMethodTmpl() (*asset, error) {
	bytes, err := propertyHttp_resolverMethodTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "property/http_resolver/method.tmpl", size: 707, mode: os.FileMode(420), modTime: time.Unix(1488542641, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeDefaultConfigHcl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\xa9\x2c\x48\x55\xb0\x55\x50\x02\xd1\x7a\x25\xb9\x05\x39\x4a\x5c\x80\x00\x00\x00\xff\xff\x3a\x12\xfd\xa1\x13\x00\x00\x00")

func typeDefaultConfigHclBytes() ([]byte, error) {
	return bindataRead(
		_typeDefaultConfigHcl,
		"type/default/config.hcl",
	)
}

func typeDefaultConfigHcl() (*asset, error) {
	bytes, err := typeDefaultConfigHclBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/default/config.hcl", size: 19, mode: os.FileMode(420), modTime: time.Unix(1488546073, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeDefaultTypeTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x56\x41\x73\xda\x3a\x10\x3e\x3f\xff\x8a\x7d\x9e\xcc\x1b\x9c\xe1\x39\xf7\x76\x72\x48\x89\xd3\x21\x4d\x20\x05\x93\x4b\xd3\xc9\x08\x23\x40\x8d\x90\x1c\x59\xce\x0c\x75\xfd\xdf\x2b\x59\xb6\x91\xc1\x84\x66\x9a\x4c\xa7\x27\xf0\xee\x6a\xbf\x4f\xfb\xed\x7a\x7d\x72\x02\xe1\x92\x24\x10\xf1\x19\x06\xf5\xbb\xc0\x0c\x0b\x8c\x24\x9e\xc1\x74\x0d\x0b\x81\xe2\xe5\x23\xfd\x5f\x7b\x95\xc7\x51\xd1\xe7\x43\x18\x0c\x43\x08\xce\xfb\xe1\xbf\x8e\x13\xa3\xe8\x01\x2d\x30\x64\x99\xdf\xe3\x6c\x4e\x16\xfe\x8d\xb1\xe4\xf9\x7b\xc7\x71\xc8\x2a\xe6\x42\x42\xc7\xc9\x32\x32\x07\xfc\x08\xfe\x27\xc2\x66\xe0\x0e\x3f\x5c\x06\xbd\xd0\xcd\x73\x07\xa0\x70\x31\xae\xa2\x48\x72\x8f\x99\x14\x6b\xf0\xc3\x75\x8c\x07\x68\x85\x3d\xd8\x0e\x61\x11\x4d\x67\x38\xb9\x4f\xa4\x20\x6c\x01\x7e\xbf\x40\x48\xc0\xbd\x73\x31\x53\x34\x95\xf1\xe4\x5b\xc2\xd9\x9d\xeb\x7a\x79\xde\xb4\xb9\x59\x86\xd9\xac\xcc\x68\xfe\xd9\x16\x81\x98\xba\x49\x95\xb1\x30\x6a\xb3\xdf\x38\xe0\xed\xbf\xca\xc1\x8b\xa8\xea\xa9\x74\x95\x29\xcf\xab\xa7\x73\x9c\x44\x82\xc4\x92\x70\xa6\xa2\xa4\xb2\x6c\xc5\xa9\xcb\xa6\x91\x84\xcc\xa6\x79\x41\x30\x9d\x29\x96\x05\xc1\x8a\x5d\xee\xec\x80\x8c\x70\xc2\xe9\x13\x16\x20\xaa\x3f\x73\x2e\x9a\x21\x2d\x90\xf5\xa9\x06\xb4\x7d\x66\x53\xbb\x9a\xd2\x35\x96\x4b\x5e\x73\xb2\xfc\x07\xea\x32\x4f\x59\x04\x1d\x01\xc7\xad\x14\x3c\xb8\x46\x22\x59\x22\x7a\x39\x1e\x0e\x3a\x1e\x74\xbe\x7c\x9d\xae\x25\xee\x02\x16\x82\x2b\xaf\xa6\x26\xb0\x4c\x05\x03\x2d\xb2\x5f\x46\x77\xfe\x13\x7e\x23\x9f\xa7\xab\x73\x08\x6a\xc2\x56\x16\xd8\x0c\x49\x04\x06\xce\x33\x70\x3b\x68\xf5\x81\x22\xb8\x0b\x6d\xa8\xdb\xcd\xb6\xdd\x42\xfd\x41\x18\x8c\x2e\xce\x7a\x81\xfb\x3b\x4d\x42\x98\xc4\x62\x8e\x22\xdc\xec\x93\xa6\x28\x7f\xa8\x51\xe0\x48\x96\x06\x78\x77\xba\x51\x1f\xac\xee\x39\x8a\x79\x92\x90\x29\xc5\xda\x59\x44\xdd\x58\x06\x33\x8e\x96\x7a\x75\x42\x5b\xbd\x90\x2b\x87\x9d\x27\xcf\x75\xc3\x1c\xef\x58\xab\x23\x5d\x98\x72\x4e\x4d\x0f\x01\x44\x5d\xe0\x0f\x1a\x5a\x6b\x68\x01\xf8\xcf\x64\xf0\x9c\x7f\xa0\xee\x88\x22\x81\x4a\xd5\x90\xba\x5d\xf3\xc9\xa0\x3f\x1c\xb4\xe9\xfd\x26\x32\xc0\x0f\x50\xa5\x43\x31\x91\x88\x92\xef\x8d\x6e\xc9\xfe\x7e\x85\x76\x6e\xf7\x16\x82\x05\x83\xc9\xb5\x79\xcb\x3f\x5b\x2a\xe3\xb4\x86\xb5\x8e\xb1\x6d\x2f\x9d\x73\xab\x96\x60\x36\x9f\x13\x71\x96\x98\xcd\x5a\xaa\xf3\x84\x68\x6a\x18\x05\x2c\x5d\xdd\xea\x27\xa3\x49\x81\x64\x65\x50\x0f\x45\x6c\x81\xb9\x4d\xb7\x5c\x76\xed\xe1\xa7\x4d\x4f\xc7\xdd\xf8\x5c\xcf\xb1\x57\xe4\xbe\x17\xdd\xcd\x24\xbc\xdf\x6c\xcc\x57\x5d\x88\x7d\x16\xa7\x72\xcf\x56\xdc\x47\x68\x14\x8c\x87\x57\xb7\xc1\xe8\x75\xc8\xec\xc7\x19\xf7\xce\xae\xce\x5a\x51\xea\xc1\xfd\x45\xb4\xb6\x41\x37\xca\x37\x27\xfa\xe0\xa6\x53\x9f\x39\x14\xaf\xd4\x3a\x4e\x3e\xea\x8f\xbc\xcf\x57\x3a\xa8\xc3\x74\x23\x9b\x0e\xf3\x8a\xc9\x2b\x07\xaf\x9c\x97\x39\xa2\x09\x7e\xd1\x1e\x2d\x93\xab\x0f\x37\xa5\x8e\xcd\xd1\x5e\xa8\xaa\x28\xe3\x08\x51\x75\x02\x18\x56\x5f\x9e\x92\xc3\x54\x5d\xa8\x62\xa8\x2c\x2b\xc4\x52\x44\xe9\x5a\x6f\x5f\xdf\xdc\xf7\x14\x8a\x9c\x9b\x7d\xcc\x08\x75\xac\x01\xfe\x19\x00\x00\xff\xff\xf0\x2a\xe7\xfa\xda\x0a\x00\x00")

func typeDefaultTypeTmplBytes() ([]byte, error) {
	return bindataRead(
		_typeDefaultTypeTmpl,
		"type/default/type.tmpl",
	)
}

func typeDefaultTypeTmpl() (*asset, error) {
	bytes, err := typeDefaultTypeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/default/type.tmpl", size: 2778, mode: os.FileMode(420), modTime: time.Unix(1488546839, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"property/custom/config.hcl": propertyCustomConfigHcl,
	"property/custom/field.tmpl": propertyCustomFieldTmpl,
	"property/custom/method.tmpl": propertyCustomMethodTmpl,
	"property/default/config.hcl": propertyDefaultConfigHcl,
	"property/default/field.tmpl": propertyDefaultFieldTmpl,
	"property/default/method.tmpl": propertyDefaultMethodTmpl,
	"property/http_resolver/config.hcl": propertyHttp_resolverConfigHcl,
	"property/http_resolver/field.tmpl": propertyHttp_resolverFieldTmpl,
	"property/http_resolver/method.tmpl": propertyHttp_resolverMethodTmpl,
	"type/default/config.hcl": typeDefaultConfigHcl,
	"type/default/type.tmpl": typeDefaultTypeTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"property": &bintree{nil, map[string]*bintree{
		"custom": &bintree{nil, map[string]*bintree{
			"config.hcl": &bintree{propertyCustomConfigHcl, map[string]*bintree{}},
			"field.tmpl": &bintree{propertyCustomFieldTmpl, map[string]*bintree{}},
			"method.tmpl": &bintree{propertyCustomMethodTmpl, map[string]*bintree{}},
		}},
		"default": &bintree{nil, map[string]*bintree{
			"config.hcl": &bintree{propertyDefaultConfigHcl, map[string]*bintree{}},
			"field.tmpl": &bintree{propertyDefaultFieldTmpl, map[string]*bintree{}},
			"method.tmpl": &bintree{propertyDefaultMethodTmpl, map[string]*bintree{}},
		}},
		"http_resolver": &bintree{nil, map[string]*bintree{
			"config.hcl": &bintree{propertyHttp_resolverConfigHcl, map[string]*bintree{}},
			"field.tmpl": &bintree{propertyHttp_resolverFieldTmpl, map[string]*bintree{}},
			"method.tmpl": &bintree{propertyHttp_resolverMethodTmpl, map[string]*bintree{}},
		}},
	}},
	"type": &bintree{nil, map[string]*bintree{
		"default": &bintree{nil, map[string]*bintree{
			"config.hcl": &bintree{typeDefaultConfigHcl, map[string]*bintree{}},
			"type.tmpl": &bintree{typeDefaultTypeTmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

