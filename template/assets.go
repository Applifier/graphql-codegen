// Code generated by go-bindata.
// sources:
// property/default/config.hcl
// property/default/field.tmpl
// property/default/method.tmpl
// type/default/config.hcl
// type/default/type.tmpl
// DO NOT EDIT!

package template

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _propertyDefaultConfigHcl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\xcb\x4c\xcd\x49\x51\xb0\x55\x50\x02\x33\xf4\x4a\x72\x0b\x72\x94\xb8\x72\x53\x4b\x32\xf2\xc1\xa2\x10\x16\x54\x18\x10\x00\x00\xff\xff\xda\x37\xa8\x72\x2c\x00\x00\x00")

func propertyDefaultConfigHclBytes() ([]byte, error) {
	return bindataRead(
		_propertyDefaultConfigHcl,
		"property/default/config.hcl",
	)
}

func propertyDefaultConfigHcl() (*asset, error) {
	bytes, err := propertyDefaultConfigHclBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "property/default/config.hcl", size: 44, mode: os.FileMode(420), modTime: time.Unix(1488374780, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _propertyDefaultFieldTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x4e\x4e\x2c\xc8\x2c\x49\xcc\xc9\xac\x4a\x55\xd0\x73\xcb\x4c\xcd\x49\xf1\x4b\xcc\x4d\xad\xad\x55\xa8\xae\x86\x70\x43\x2a\x0b\x40\xdc\x84\xac\xe2\xfc\x3c\x2b\x25\x98\x28\x44\x91\x52\x02\x17\x20\x00\x00\xff\xff\xde\x27\x34\xad\x41\x00\x00\x00")

func propertyDefaultFieldTmplBytes() ([]byte, error) {
	return bindataRead(
		_propertyDefaultFieldTmpl,
		"property/default/field.tmpl",
	)
}

func propertyDefaultFieldTmpl() (*asset, error) {
	bytes, err := propertyDefaultFieldTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "property/default/field.tmpl", size: 65, mode: os.FileMode(420), modTime: time.Unix(1488402499, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _propertyDefaultMethodTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\x2b\xcd\x4b\x56\xd0\x28\x52\xd0\xaa\xae\xd6\x0b\xa9\x2c\x48\xf5\x4b\xcc\x4d\xad\xad\x0d\x4a\x2d\xce\xcf\x29\x4b\x2d\xd2\x54\xa8\xae\x4e\x4e\x2c\xc8\x2c\x49\xcc\xc9\xac\x4a\x55\xd0\xf3\x4d\x2d\xc9\xc8\x4f\x81\xa8\xd1\x00\x49\x42\x45\x82\x52\x4b\x4a\x8b\xf2\x40\xfa\x6b\x6b\x15\xaa\xb9\x14\x14\x8a\xc0\x02\x0a\x45\x7a\x28\xc6\xea\x61\x33\x0d\xa2\xb7\xb6\x96\xab\x96\x0b\x10\x00\x00\xff\xff\x0a\x2b\xed\xdf\x8d\x00\x00\x00")

func propertyDefaultMethodTmplBytes() ([]byte, error) {
	return bindataRead(
		_propertyDefaultMethodTmpl,
		"property/default/method.tmpl",
	)
}

func propertyDefaultMethodTmpl() (*asset, error) {
	bytes, err := propertyDefaultMethodTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "property/default/method.tmpl", size: 141, mode: os.FileMode(420), modTime: time.Unix(1488402609, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeDefaultConfigHcl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\xa9\x2c\x48\x55\xb0\x55\x50\x02\xd1\x7a\x25\xb9\x05\x39\x4a\x5c\x80\x00\x00\x00\xff\xff\x3a\x12\xfd\xa1\x13\x00\x00\x00")

func typeDefaultConfigHclBytes() ([]byte, error) {
	return bindataRead(
		_typeDefaultConfigHcl,
		"type/default/config.hcl",
	)
}

func typeDefaultConfigHcl() (*asset, error) {
	bytes, err := typeDefaultConfigHclBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/default/config.hcl", size: 19, mode: os.FileMode(420), modTime: time.Unix(1488404377, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeDefaultTypeTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x90\xcf\x4e\x84\x30\x10\xc6\xef\x7d\x8a\xc9\x1e\x0c\x98\x4d\xf7\x01\x3c\x6a\x4c\x34\xd9\xd5\xf8\xe7\x64\x3c\x54\x18\xd8\x2a\xb4\x64\x5a\x4c\x36\x4d\xdf\xdd\x01\x84\x80\xcb\xc1\xdb\xf0\xf1\xfb\xe6\x37\x69\xa3\xb2\x2f\x55\x22\x84\x20\xaf\xad\x29\x74\x29\x1f\x87\x24\xc6\x2b\x21\x74\xdd\x58\xf2\x90\x08\x80\x0d\x9a\xcc\xe6\xda\x94\xbb\x4f\x67\xcd\x86\x93\x10\x48\x19\xae\xca\xbb\x9e\x72\x31\x72\xd8\xc5\xb2\x9f\x42\x40\x93\xf3\x94\x0a\xb1\xdb\x75\xe9\xcb\xa9\xc1\x83\xaa\x79\xf3\xf8\x75\x83\x2e\x23\xdd\x78\x6d\x0d\x83\x9e\x93\x3f\x9c\xf3\xd4\x66\x1e\xc2\xdc\x76\xab\xb1\xca\x59\xd6\x7b\x46\x49\x3c\x97\x3c\xa1\xb3\xd5\x37\x12\xd0\x38\x14\x96\x96\xc8\x8a\x72\x6a\x2d\xd4\xf3\x0e\xab\xa6\x5b\xf6\xe8\x8f\x76\x3a\x46\x8c\xd7\x88\xa2\x35\x19\x24\x04\x97\xab\xbb\x53\xd8\x2b\x72\x47\x55\xdd\x3f\x3f\x1c\x92\x14\x92\xb7\xf7\x8f\x93\xc7\x2d\x20\x91\xe5\xbf\x9d\x93\xd0\xb7\x64\xa0\x7b\x6b\xf9\x4b\x27\x17\x24\x17\xfb\x52\xf1\x0f\xd5\xab\xa9\x67\xb2\x5c\x79\x05\x83\x2e\x1d\x74\x67\xb6\xa9\xd0\xc3\x5b\x58\xb3\xfe\x04\x00\x00\xff\xff\x46\x11\xc7\x85\x36\x02\x00\x00")

func typeDefaultTypeTmplBytes() ([]byte, error) {
	return bindataRead(
		_typeDefaultTypeTmpl,
		"type/default/type.tmpl",
	)
}

func typeDefaultTypeTmpl() (*asset, error) {
	bytes, err := typeDefaultTypeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/default/type.tmpl", size: 566, mode: os.FileMode(420), modTime: time.Unix(1488404946, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"property/default/config.hcl": propertyDefaultConfigHcl,
	"property/default/field.tmpl": propertyDefaultFieldTmpl,
	"property/default/method.tmpl": propertyDefaultMethodTmpl,
	"type/default/config.hcl": typeDefaultConfigHcl,
	"type/default/type.tmpl": typeDefaultTypeTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"property": &bintree{nil, map[string]*bintree{
		"default": &bintree{nil, map[string]*bintree{
			"config.hcl": &bintree{propertyDefaultConfigHcl, map[string]*bintree{}},
			"field.tmpl": &bintree{propertyDefaultFieldTmpl, map[string]*bintree{}},
			"method.tmpl": &bintree{propertyDefaultMethodTmpl, map[string]*bintree{}},
		}},
	}},
	"type": &bintree{nil, map[string]*bintree{
		"default": &bintree{nil, map[string]*bintree{
			"config.hcl": &bintree{typeDefaultConfigHcl, map[string]*bintree{}},
			"type.tmpl": &bintree{typeDefaultTypeTmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

