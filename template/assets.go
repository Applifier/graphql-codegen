// Code generated by go-bindata.
// sources:
// property/default/config.hcl
// property/default/field.tmpl
// property/default/method.tmpl
// type/default/config.hcl
// type/default/type.tmpl
// DO NOT EDIT!

package template

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _propertyDefaultConfigHcl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\xcb\x4c\xcd\x49\x51\xb0\x55\x50\x02\x33\xf4\x4a\x72\x0b\x72\x94\xb8\x72\x53\x4b\x32\xf2\xc1\xa2\x10\x16\x54\x18\x10\x00\x00\xff\xff\xda\x37\xa8\x72\x2c\x00\x00\x00")

func propertyDefaultConfigHclBytes() ([]byte, error) {
	return bindataRead(
		_propertyDefaultConfigHcl,
		"property/default/config.hcl",
	)
}

func propertyDefaultConfigHcl() (*asset, error) {
	bytes, err := propertyDefaultConfigHclBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "property/default/config.hcl", size: 44, mode: os.FileMode(420), modTime: time.Unix(1488374780, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _propertyDefaultFieldTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x4e\x4e\x2c\xc8\x2c\x49\xcc\xc9\xac\x4a\x55\xd0\x73\xcb\x4c\xcd\x49\xf1\x4b\xcc\x4d\xad\xad\x55\xa8\xae\x86\x70\x43\x2a\x0b\x40\xdc\x84\xac\xe2\xfc\x3c\x2b\x25\x98\x28\x44\x91\x52\x02\x17\x20\x00\x00\xff\xff\xde\x27\x34\xad\x41\x00\x00\x00")

func propertyDefaultFieldTmplBytes() ([]byte, error) {
	return bindataRead(
		_propertyDefaultFieldTmpl,
		"property/default/field.tmpl",
	)
}

func propertyDefaultFieldTmpl() (*asset, error) {
	bytes, err := propertyDefaultFieldTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "property/default/field.tmpl", size: 65, mode: os.FileMode(420), modTime: time.Unix(1488402499, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _propertyDefaultMethodTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\xce\x4c\x53\x48\x2d\x54\xd0\x0b\xa9\x2c\x48\xf5\xce\xcc\x4b\x51\x50\xf2\x77\xf2\x72\x75\x0e\x51\xaa\xad\xe5\x4a\x2b\xcd\x4b\x56\xd0\x28\x52\xd0\xaa\xae\x06\xcb\xfb\x25\xe6\xa6\xd6\xd6\x06\xa5\x16\xe7\xe7\x94\xa5\x16\x69\x2a\x54\x57\x27\x27\x16\x64\x96\x24\xe6\x64\x56\xa5\x2a\xe8\xf9\xa6\x96\x64\xe4\xa7\x40\xd4\x68\x80\x24\xa1\x22\x41\xa9\x25\xa5\x45\x79\x20\xfd\xb5\xb5\x0a\xd5\x5c\x0a\x0a\x45\x60\x01\x85\x22\x3d\x14\x63\xf5\xb0\x99\x06\xd1\x0b\x74\x4a\x2d\x57\x75\x75\x6a\x5e\x4a\x2d\x88\xc6\x70\xb1\xa7\x5f\x88\x6b\x90\x9b\xa3\xb3\xab\x12\x58\x9e\x54\x47\xc1\x8d\x06\x04\x00\x00\xff\xff\x0c\x1b\x8f\x3d\x0d\x01\x00\x00")

func propertyDefaultMethodTmplBytes() ([]byte, error) {
	return bindataRead(
		_propertyDefaultMethodTmpl,
		"property/default/method.tmpl",
	)
}

func propertyDefaultMethodTmpl() (*asset, error) {
	bytes, err := propertyDefaultMethodTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "property/default/method.tmpl", size: 269, mode: os.FileMode(420), modTime: time.Unix(1488466827, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeDefaultConfigHcl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\xa9\x2c\x48\x55\xb0\x55\x50\x02\xd1\x7a\x25\xb9\x05\x39\x4a\x5c\x80\x00\x00\x00\xff\xff\x3a\x12\xfd\xa1\x13\x00\x00\x00")

func typeDefaultConfigHclBytes() ([]byte, error) {
	return bindataRead(
		_typeDefaultConfigHcl,
		"type/default/config.hcl",
	)
}

func typeDefaultConfigHcl() (*asset, error) {
	bytes, err := typeDefaultConfigHclBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/default/config.hcl", size: 19, mode: os.FileMode(420), modTime: time.Unix(1488404377, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeDefaultTypeTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x53\xc1\x8e\xd3\x30\x14\x3c\xe3\xaf\x78\x54\x2b\x94\xac\x4a\x7a\x07\x71\x80\xb6\x2b\x75\xd1\xb6\xab\x25\x9c\x10\x07\x37\x79\x49\xcd\xa6\x76\xf6\xd9\x45\xaa\xac\xfc\x3b\x76\xd2\x44\x4e\x5b\x10\x12\x07\x4e\x4d\xdf\x8c\x67\x26\x9e\x97\xd9\x0c\xd2\x9d\xd0\x90\xa9\x1c\xc1\xfd\x96\x28\x91\x90\x1b\xcc\x61\x7b\x84\x92\x78\xbd\x7b\xa9\xde\x7a\xd4\x21\xcc\xb1\x17\x1b\x58\x6f\x52\x58\x2e\x56\xe9\x6b\xc6\x6a\x9e\x3d\xf3\x12\xc1\xda\x64\xae\x64\x21\xca\xe4\xb1\x9b\x34\xcd\x7b\xc6\x98\xd8\xd7\x8a\x0c\x44\xcc\x5a\x51\x00\xbe\x40\xf2\x59\xc8\x1c\x26\x9b\x4f\xf7\xcb\x79\x3a\x69\x1a\x06\x30\x41\xe9\xe4\x85\x2c\x67\x3f\xb4\x92\x13\x47\x45\x99\xb7\x88\xb5\xc4\xa5\x13\x4f\x56\xad\x8c\x6e\x87\x7e\x9c\x9c\xe0\x8e\x18\xb3\xdf\xcb\xbb\xc0\x8e\x9e\x1e\x6b\x5c\xf3\xbd\x0b\xd5\xff\x5b\xa0\xce\x48\xd4\x46\x28\xe9\x58\xc6\x4d\xce\x78\xda\xd0\x21\x33\x60\xc3\x18\x77\x02\xab\xdc\xa5\x68\x03\xf4\xee\x0d\xbb\x30\x79\x42\xad\xaa\x9f\x48\x40\xfd\x43\xa1\x68\x4c\xb9\x62\x39\x9c\x1a\x59\x87\x67\x1a\xff\xa2\xa7\x2c\x0f\x68\x76\x6a\x08\x33\x5c\x1a\x2b\x0e\x32\x83\x88\xe0\xf6\xaa\x76\x0c\x0f\x9c\xf4\x8e\x57\xf7\x5f\x36\xeb\x28\x86\xe8\xdb\xf7\xed\xd1\xe0\x14\x90\x48\x39\xd4\x7b\x12\x9a\x03\x49\xf0\x65\x24\x27\x76\xf4\x86\x92\x91\x5e\xcc\xfe\xc2\xea\xab\xdc\x07\x66\x39\x37\x1c\x3a\xbb\xb8\xb3\xbb\x70\x1b\x0e\xb4\xe4\x29\x5c\x73\xed\x5f\xf4\xac\xf1\xd5\x3a\x5d\x3e\xdd\x7d\x9c\x2f\xff\xa9\x74\x21\x0d\x52\xc1\x33\x1c\xf7\x3e\xbe\xeb\xff\x52\xbc\xb5\x70\x63\x4e\x03\x78\xf7\x01\x06\x14\xda\xbb\xe8\x82\xde\xd4\x4a\x6b\xb1\xad\xd0\x83\x2d\xeb\x31\x18\x74\x9f\x4f\x50\xda\x20\x18\x96\x96\x2a\x07\x84\x3a\x4d\xe3\xf7\xe4\xf6\x62\xda\x1f\x99\xc2\x56\xa9\xaa\x5b\x1d\x80\x6c\x0a\xea\xd9\x5b\xfb\xea\x02\x83\xe4\x0f\x0a\x31\x7b\x05\xc3\x22\xb4\x02\x4e\x2a\x58\xe9\xe1\xe9\x57\x00\x00\x00\xff\xff\x90\x05\x0b\xd9\xac\x04\x00\x00")

func typeDefaultTypeTmplBytes() ([]byte, error) {
	return bindataRead(
		_typeDefaultTypeTmpl,
		"type/default/type.tmpl",
	)
}

func typeDefaultTypeTmpl() (*asset, error) {
	bytes, err := typeDefaultTypeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/default/type.tmpl", size: 1196, mode: os.FileMode(420), modTime: time.Unix(1488468988, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"property/default/config.hcl": propertyDefaultConfigHcl,
	"property/default/field.tmpl": propertyDefaultFieldTmpl,
	"property/default/method.tmpl": propertyDefaultMethodTmpl,
	"type/default/config.hcl": typeDefaultConfigHcl,
	"type/default/type.tmpl": typeDefaultTypeTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"property": &bintree{nil, map[string]*bintree{
		"default": &bintree{nil, map[string]*bintree{
			"config.hcl": &bintree{propertyDefaultConfigHcl, map[string]*bintree{}},
			"field.tmpl": &bintree{propertyDefaultFieldTmpl, map[string]*bintree{}},
			"method.tmpl": &bintree{propertyDefaultMethodTmpl, map[string]*bintree{}},
		}},
	}},
	"type": &bintree{nil, map[string]*bintree{
		"default": &bintree{nil, map[string]*bintree{
			"config.hcl": &bintree{typeDefaultConfigHcl, map[string]*bintree{}},
			"type.tmpl": &bintree{typeDefaultTypeTmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

