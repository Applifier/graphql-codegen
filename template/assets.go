// Code generated by go-bindata.
// sources:
// property/default/config.hcl
// property/default/field.tmpl
// property/default/method.tmpl
// type/default/config.hcl
// type/default/type.tmpl
// DO NOT EDIT!

package template

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _propertyDefaultConfigHcl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\xcb\x4c\xcd\x49\x51\xb0\x55\x50\x02\x33\xf4\x4a\x72\x0b\x72\x94\xb8\x72\x53\x4b\x32\xf2\xc1\xa2\x10\x16\x54\x18\x10\x00\x00\xff\xff\xda\x37\xa8\x72\x2c\x00\x00\x00")

func propertyDefaultConfigHclBytes() ([]byte, error) {
	return bindataRead(
		_propertyDefaultConfigHcl,
		"property/default/config.hcl",
	)
}

func propertyDefaultConfigHcl() (*asset, error) {
	bytes, err := propertyDefaultConfigHclBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "property/default/config.hcl", size: 44, mode: os.FileMode(420), modTime: time.Unix(1488374780, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _propertyDefaultFieldTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\xd7\x57\xa8\xae\x4e\x4e\x2c\xc8\x2c\x49\xcc\xc9\xac\x4a\x55\xd0\x73\xcb\x4c\xcd\x49\xf1\x4b\xcc\x4d\xad\xad\x05\xca\x40\xb8\x2e\xa9\xc5\xc9\x45\x99\x05\x25\x99\xf9\x79\xb5\xb5\x5c\x84\xd5\x87\x54\x16\x80\xb8\x09\x59\xc5\xf9\x79\x56\x4a\x30\x51\x88\x22\xa5\x04\x2e\x40\x00\x00\x00\xff\xff\x1c\x2b\xdd\xa2\x74\x00\x00\x00")

func propertyDefaultFieldTmplBytes() ([]byte, error) {
	return bindataRead(
		_propertyDefaultFieldTmpl,
		"property/default/field.tmpl",
	)
}

func propertyDefaultFieldTmpl() (*asset, error) {
	bytes, err := propertyDefaultFieldTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "property/default/field.tmpl", size: 116, mode: os.FileMode(420), modTime: time.Unix(1488479462, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _propertyDefaultMethodTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x51\xcb\x4e\xeb\x30\x10\xdd\xf7\x2b\x46\xd1\x5d\xb4\x5d\xb8\x77\x8d\xc4\xa2\x94\x22\x01\xa2\x48\x55\xf7\xc8\x4a\x27\xa9\x25\xc7\x09\xb6\x83\x54\x5c\xff\x3b\x13\x3b\xa9\x1b\x04\x2c\x61\xe7\xc7\x99\x33\xe7\xe1\x1c\xec\xb1\x10\x0a\x21\xe3\xba\x6c\x2b\x54\xd6\x64\xe0\x3d\x5d\x0c\xcc\x8d\xd5\x6d\x6e\xdd\x04\xc0\x39\xcd\x55\x89\xc0\xbc\x77\x8e\x6d\x78\x85\x70\x82\x9c\x37\xc2\x72\x29\xde\xd1\x7b\x42\xb0\xdd\xb1\xa1\x53\x40\xa3\xda\xd3\x89\xb0\x40\x27\xe2\x9b\x38\x37\xec\xd1\x98\xa3\x78\x43\x9d\x75\x54\xa2\x00\x61\x5e\x68\xab\x3e\x02\x23\xdc\x16\x4d\x2d\xe9\x93\x18\xa4\xc1\xb0\x6c\xf4\xd8\xd1\x0e\xec\x61\x1a\x5f\x21\xec\x7d\x14\xb4\x27\x7b\xbe\x79\x58\xaf\x76\x59\xf8\xfc\x77\xe0\x66\x39\x78\x82\xab\x6b\x28\x2d\x4c\xd9\x13\xda\x43\xbd\x4f\xef\x27\x90\xa8\x66\xf0\x9f\x46\x16\x0b\x12\x9e\x3c\x41\x8f\xed\xcc\x46\x7f\xf1\x7e\x8b\x26\xd7\xa2\xb1\xa2\x56\x34\x54\xb4\x2a\x87\xa9\x86\xb9\x73\x16\xab\x46\x72\x7b\x69\x31\x6a\x8b\x0c\xb3\x1f\xd8\xa7\xc1\xcb\x48\x71\xe7\x33\x31\x5e\x94\xf3\xd9\xc2\x39\x90\x59\xd2\xb8\x45\xdb\x6a\x15\xfb\x80\xd8\xdf\x28\xe9\xa4\x4a\x07\x24\x28\x21\x87\xc8\xfb\x17\xcd\xfa\x46\x23\x8e\x7d\x25\x3e\xae\x49\x8d\x74\xb1\x7f\xdb\xcd\xfd\x66\xb7\xde\xde\x2d\x57\xeb\xdf\xac\xe7\x6f\x22\x3f\xc7\xf0\x11\x00\x00\xff\xff\xa5\x2d\xa9\x13\x5f\x03\x00\x00")

func propertyDefaultMethodTmplBytes() ([]byte, error) {
	return bindataRead(
		_propertyDefaultMethodTmpl,
		"property/default/method.tmpl",
	)
}

func propertyDefaultMethodTmpl() (*asset, error) {
	bytes, err := propertyDefaultMethodTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "property/default/method.tmpl", size: 863, mode: os.FileMode(420), modTime: time.Unix(1488479494, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeDefaultConfigHcl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\xa9\x2c\x48\x55\xb0\x55\x50\x02\xd1\x7a\x25\xb9\x05\x39\x4a\x5c\x80\x00\x00\x00\xff\xff\x3a\x12\xfd\xa1\x13\x00\x00\x00")

func typeDefaultConfigHclBytes() ([]byte, error) {
	return bindataRead(
		_typeDefaultConfigHcl,
		"type/default/config.hcl",
	)
}

func typeDefaultConfigHcl() (*asset, error) {
	bytes, err := typeDefaultConfigHclBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/default/config.hcl", size: 19, mode: os.FileMode(420), modTime: time.Unix(1488404377, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeDefaultTypeTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x55\x51\x6f\x9b\x30\x10\x7e\x9e\x7f\xc5\x0d\x55\x13\x54\x19\x7d\xdf\xd4\x87\xad\xa5\x52\xba\x15\xaa\x94\xf4\x65\x9a\x2a\x07\x9c\xc4\x2b\xb1\xa9\x31\x95\x32\xc6\x7f\x9f\x6d\x02\x31\x09\x69\x35\xad\xd5\xb4\xa7\x84\xbb\xcf\xf7\x7d\xdc\x77\xe6\x4e\x4e\x20\x5e\xd2\x02\x12\x9e\x12\x50\xbf\x0b\xc2\x88\x20\x58\x92\x14\x66\x6b\x58\x08\x9c\x2f\x1f\xb2\xf7\x3a\xab\x32\x48\xa1\xcf\x23\x08\xa3\x18\x82\xf3\x71\xfc\x16\xa1\x1c\x27\xf7\x78\x41\xa0\xaa\xfc\x33\xce\xe6\x74\xe1\x5f\x37\x91\xba\xfe\x88\x10\xa2\xab\x9c\x0b\x09\x2e\xaa\x2a\x3a\x07\xf2\x00\xfe\x17\xca\x52\x70\xa2\xcf\x97\xc1\x59\xec\xd4\x35\x02\x30\x29\xc6\x15\x8a\x16\x77\x84\x49\xb1\x06\x3f\x5e\xe7\x24\xc4\x2b\xe2\x81\x81\x38\x84\x29\x05\x94\x2d\x4e\x7e\x14\x9c\x39\xe6\x10\x61\xa9\xca\xb5\xbf\x3a\x22\x30\x53\x4a\xfc\xb1\xe1\x2c\x4c\x50\x87\xfd\x4d\xba\x01\x7a\x87\xa5\x3c\x2b\x44\xbd\xbd\x2a\xd7\x86\xea\xba\x7d\x3a\x27\x45\x22\x68\x2e\x29\x67\x0a\x25\x55\x64\x07\x57\x48\x51\x26\x12\x2a\x5b\xe6\x05\x25\x59\xaa\x54\x1a\x81\xad\xba\x1a\xed\x91\x4c\x48\xc1\xb3\x47\x22\x40\xb4\x7f\xe6\x5c\xf4\x21\x03\x94\xdd\xa9\x1e\xb5\x7d\x66\xdb\xbb\x4e\xd2\x15\x91\x4b\xde\x69\xb2\xf2\xcf\xf4\x65\x5e\xb2\x04\x5c\x01\xc7\x83\x12\x3c\xb8\xc2\xa2\x58\xe2\xec\xf2\x26\x0a\x5d\x0f\xdc\x6f\xdf\x67\x6b\x49\x46\x40\x84\xe0\x2a\xab\xa5\x09\x22\x4b\xc1\x40\xbb\xeb\x6f\xd0\xee\x3b\xe1\xf7\xea\x79\xba\x3b\xcf\x51\x4d\xd9\xca\x22\x4b\xb1\xc4\xd0\xd0\x79\x0d\xdd\x1e\x5b\x77\xc0\x80\x47\x30\xc4\xba\x3b\x6c\xbb\x23\x34\x0e\xe3\x60\x72\xf1\xe9\x2c\x70\xfe\x66\x48\x28\x93\x44\xcc\x71\x42\xfa\x73\xd2\x37\xe5\x1f\x0d\x0a\x1c\xc9\x4d\x00\x3e\x9c\x6e\xdd\x07\x6b\x7a\x8e\x72\x5e\x14\x74\x96\x11\x9d\x34\xa8\x6b\x2b\xd0\x5c\x47\xcb\xbd\xae\xa0\xed\x5e\xcc\x55\xc2\xae\x53\xd7\x7a\x60\x8e\xf7\xa2\xed\x91\x11\xcc\x38\xcf\x9a\x19\x02\x48\x46\xc0\xef\x35\xb5\xf6\xd0\x22\xf0\x9f\xa8\xe0\xa1\x37\xd0\x4d\x84\x29\xa0\x4a\xf5\xac\x1e\xf6\x7c\x1a\x8e\xa3\x70\xc8\xef\x57\xb1\x01\x7e\x81\x6a\x1d\xce\xa9\xc4\x19\xfd\xd9\x9b\x96\xea\xff\x77\x68\xef\xed\x5e\xc3\xb0\x20\x9c\x5e\x35\x5f\xf9\x27\x5b\xd5\x24\xad\xcb\xda\x61\xec\xd8\x9f\xde\x73\xab\x97\xda\x61\xb5\xc9\x50\xc2\x59\xd1\x6c\xc6\x8d\x3b\x8f\x38\x2b\x1b\x45\x01\x2b\x57\xb7\xfa\xa9\xf1\xc4\x30\x59\x15\xd4\x83\xc1\x1a\xce\x5d\xb9\x9b\x65\x37\x0c\x3f\xed\x67\x5c\x67\x9b\x73\x3c\x64\xaf\xc8\x43\x1f\xba\xeb\x69\x7c\xb7\xdd\x98\x2f\xba\x10\xc7\x2c\x2f\xe5\x81\xad\x78\x48\xd0\x24\xb8\x89\xbe\xde\x06\x93\x97\x11\xb3\xe5\xf9\x1d\x00\x00\xff\xff\xb8\xbb\xcd\x0c\x16\x09\x00\x00")

func typeDefaultTypeTmplBytes() ([]byte, error) {
	return bindataRead(
		_typeDefaultTypeTmpl,
		"type/default/type.tmpl",
	)
}

func typeDefaultTypeTmpl() (*asset, error) {
	bytes, err := typeDefaultTypeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/default/type.tmpl", size: 2326, mode: os.FileMode(420), modTime: time.Unix(1488480071, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"property/default/config.hcl": propertyDefaultConfigHcl,
	"property/default/field.tmpl": propertyDefaultFieldTmpl,
	"property/default/method.tmpl": propertyDefaultMethodTmpl,
	"type/default/config.hcl": typeDefaultConfigHcl,
	"type/default/type.tmpl": typeDefaultTypeTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"property": &bintree{nil, map[string]*bintree{
		"default": &bintree{nil, map[string]*bintree{
			"config.hcl": &bintree{propertyDefaultConfigHcl, map[string]*bintree{}},
			"field.tmpl": &bintree{propertyDefaultFieldTmpl, map[string]*bintree{}},
			"method.tmpl": &bintree{propertyDefaultMethodTmpl, map[string]*bintree{}},
		}},
	}},
	"type": &bintree{nil, map[string]*bintree{
		"default": &bintree{nil, map[string]*bintree{
			"config.hcl": &bintree{typeDefaultConfigHcl, map[string]*bintree{}},
			"type.tmpl": &bintree{typeDefaultTypeTmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

