// Code generated by go-bindata.
// sources:
// property/default/config.hcl
// property/default/field.tmpl
// property/default/method.tmpl
// type/default/config.hcl
// type/default/type.tmpl
// DO NOT EDIT!

package template

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _propertyDefaultConfigHcl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\xcb\x4c\xcd\x49\x51\xb0\x55\x50\x02\x33\xf4\x4a\x72\x0b\x72\x94\xb8\x72\x53\x4b\x32\xf2\xc1\xa2\x10\x16\x54\x18\x10\x00\x00\xff\xff\xda\x37\xa8\x72\x2c\x00\x00\x00")

func propertyDefaultConfigHclBytes() ([]byte, error) {
	return bindataRead(
		_propertyDefaultConfigHcl,
		"property/default/config.hcl",
	)
}

func propertyDefaultConfigHcl() (*asset, error) {
	bytes, err := propertyDefaultConfigHclBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "property/default/config.hcl", size: 44, mode: os.FileMode(420), modTime: time.Unix(1488374780, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _propertyDefaultFieldTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x4e\x4e\x2c\xc8\x2c\x49\xcc\xc9\xac\x4a\x55\xd0\x73\xcb\x4c\xcd\x49\xf1\x4b\xcc\x4d\xad\xad\x55\xa8\xae\x86\x70\x43\x2a\x0b\x40\xdc\x84\xac\xe2\xfc\x3c\x2b\x25\x98\x28\x44\x91\x52\x02\x17\x20\x00\x00\xff\xff\xde\x27\x34\xad\x41\x00\x00\x00")

func propertyDefaultFieldTmplBytes() ([]byte, error) {
	return bindataRead(
		_propertyDefaultFieldTmpl,
		"property/default/field.tmpl",
	)
}

func propertyDefaultFieldTmpl() (*asset, error) {
	bytes, err := propertyDefaultFieldTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "property/default/field.tmpl", size: 65, mode: os.FileMode(420), modTime: time.Unix(1488402499, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _propertyDefaultMethodTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\xce\x4c\x53\x48\x2d\x54\xd0\x0b\xa9\x2c\x48\xf5\xce\xcc\x4b\x51\x50\xf2\x77\xf2\x72\x75\x0e\x51\xaa\xad\xe5\x4a\x2b\xcd\x4b\x56\xd0\x28\x52\xd0\xaa\xae\x06\xcb\xfb\x25\xe6\xa6\xd6\xd6\x06\xa5\x16\xe7\xe7\x94\xa5\x16\x69\x2a\x54\x57\x27\x27\x16\x64\x96\x24\xe6\x64\x56\xa5\x2a\xe8\xf9\xa6\x96\x64\xe4\xa7\x40\xd4\x68\x80\x24\xa1\x22\x41\xa9\x25\xa5\x45\x79\x20\xfd\xb5\xb5\x0a\xd5\x5c\x0a\x0a\x45\x60\x01\x85\x22\x3d\x14\x63\xf5\xb0\x99\x06\xd1\x0b\x74\x4a\x2d\x57\x75\x75\x6a\x5e\x4a\x2d\x88\xc6\x70\xb1\xa7\x5f\x88\x6b\x90\x9b\xa3\xb3\xab\x12\x58\x9e\x54\x47\xc1\x8d\x06\x04\x00\x00\xff\xff\x0c\x1b\x8f\x3d\x0d\x01\x00\x00")

func propertyDefaultMethodTmplBytes() ([]byte, error) {
	return bindataRead(
		_propertyDefaultMethodTmpl,
		"property/default/method.tmpl",
	)
}

func propertyDefaultMethodTmpl() (*asset, error) {
	bytes, err := propertyDefaultMethodTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "property/default/method.tmpl", size: 269, mode: os.FileMode(420), modTime: time.Unix(1488466827, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeDefaultConfigHcl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\xa9\x2c\x48\x55\xb0\x55\x50\x02\xd1\x7a\x25\xb9\x05\x39\x4a\x5c\x80\x00\x00\x00\xff\xff\x3a\x12\xfd\xa1\x13\x00\x00\x00")

func typeDefaultConfigHclBytes() ([]byte, error) {
	return bindataRead(
		_typeDefaultConfigHcl,
		"type/default/config.hcl",
	)
}

func typeDefaultConfigHcl() (*asset, error) {
	bytes, err := typeDefaultConfigHclBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/default/config.hcl", size: 19, mode: os.FileMode(420), modTime: time.Unix(1488404377, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeDefaultTypeTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x55\x5d\x6f\xd3\x30\x14\x7d\xc6\xbf\xe2\x12\x4d\x28\x99\x4a\xf6\x0e\xda\x03\xb4\x99\xd4\xa1\xa6\xd3\x48\x79\x41\x3c\xb8\xc9\x6d\x6b\x96\xda\x99\xed\x4e\x2a\x26\xff\x1d\x3b\x49\x33\x67\x2d\x1f\x12\x9a\x10\x4f\x8d\xef\x39\x3e\xe7\xfa\x1e\x57\xbe\xb8\x80\x6c\xc3\x14\xe4\xa2\x40\xb0\xbf\x6b\xe4\x28\x91\x6a\x2c\x60\xb9\x87\xb5\xa4\xd5\xe6\xbe\x7c\xed\x50\x8b\x10\xcb\x9e\xcc\x21\x9d\x67\x90\x4c\xa6\xd9\x4b\x42\x2a\x9a\xdf\xd1\x35\x82\x31\xf1\x58\xf0\x15\x5b\xc7\x37\x6d\xa5\xae\xdf\x12\x42\xd8\xb6\x12\x52\x43\x48\x8c\x61\x2b\xc0\x7b\x88\x3f\x30\x5e\x40\x30\x7f\x7f\x9d\x8c\xb3\xa0\xae\x09\x40\x80\xdc\xca\x33\xbe\xbe\xf8\xaa\x04\x0f\x2c\x15\x79\xd1\x20\xc6\x48\xca\xad\x78\x3c\x6d\x64\x54\x53\x74\xe5\xb8\x83\x5b\x62\x44\x7e\x2e\x6f\x1b\xb6\xf4\x6c\x5f\x61\x4a\xb7\xb6\xa9\xc3\x6a\x82\x2a\x97\xac\xd2\x4c\x70\xcb\xd2\xb6\xf2\x84\xa7\xb4\xdc\xe5\x1a\x8c\xdf\xc6\x15\xc3\xb2\xb0\x5d\x34\x0d\x1c\xdc\x6b\x72\x64\x72\x8b\x4a\x94\x0f\x28\x41\x1e\x3e\x56\x42\x0e\x29\x27\x2c\xfb\x5d\x03\x6b\x7f\x4f\xed\x0e\xda\xf5\x32\x43\xbd\x11\x7d\x33\xfd\xd0\xc8\x6a\xc7\x73\x08\x25\x9c\x9f\xd4\x8e\x60\x46\xa5\xda\xd0\xf2\xfa\xe3\x3c\x0d\x23\x08\x3f\x7f\x59\xee\x35\x8e\x00\xa5\x14\x16\x75\x9e\x12\xf5\x4e\x72\x70\x61\xc4\x1d\x3b\x7c\x25\xe3\x81\x5e\x44\xfe\xc0\x6a\xc1\xb7\x9e\x59\x41\x35\x85\xd6\x2e\x6a\xed\x8e\xdc\xfa\x0d\x0d\x79\x04\xa7\x5c\xfb\x83\x3e\x89\x7c\x9a\x66\xc9\xed\xd5\xbb\x71\xf2\x57\xa9\x33\xae\x51\xae\x68\x8e\xc3\xe0\x87\xc3\xfe\x27\xc9\x1b\x03\x67\xba\x2b\xc0\x9b\x4b\xe8\x51\x68\xd2\x6f\x1b\x3d\xab\x84\x52\x6c\x59\xa2\x03\x1b\xd6\x8d\x57\x68\xff\x3f\x5e\x6a\xbd\xa0\x9f\x5a\x26\x2c\xe0\xeb\xd4\xb5\xbb\x28\xe7\x47\xd5\xc3\x96\x11\x2c\x85\x28\xdb\xbb\x03\x90\x8f\x40\xdc\x39\x6b\x97\x9d\x67\x10\xff\x42\x21\x22\x2f\xa0\xbf\x09\x8d\x80\x95\x1a\x44\x7d\x3a\xf3\x45\x3a\x9d\xa7\xa7\xf2\x7e\x96\x18\xe0\x3b\xd8\xd1\xd1\x8a\x69\x5a\xb2\x6f\x83\xdb\x62\xfe\xff\x84\x8e\x4e\xf7\x1c\x81\x25\xe9\x62\x16\xd4\xbf\x19\x55\x17\x8c\x77\x74\x17\x88\x7d\x1f\x48\x2e\xb8\x6a\x1f\x93\x6e\x98\x0f\xb4\xdc\xb5\x02\x09\xdf\x6d\x3f\xb9\x95\xea\x9e\x06\x6f\xbb\x5d\x34\x44\x2b\x74\x39\x44\xc2\xe0\x11\x0b\x22\xf2\xf8\xa0\x1c\xbe\x7e\x04\x00\x00\xff\xff\xd6\x49\xde\xd6\x1e\x07\x00\x00")

func typeDefaultTypeTmplBytes() ([]byte, error) {
	return bindataRead(
		_typeDefaultTypeTmpl,
		"type/default/type.tmpl",
	)
}

func typeDefaultTypeTmpl() (*asset, error) {
	bytes, err := typeDefaultTypeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/default/type.tmpl", size: 1822, mode: os.FileMode(420), modTime: time.Unix(1488470572, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"property/default/config.hcl": propertyDefaultConfigHcl,
	"property/default/field.tmpl": propertyDefaultFieldTmpl,
	"property/default/method.tmpl": propertyDefaultMethodTmpl,
	"type/default/config.hcl": typeDefaultConfigHcl,
	"type/default/type.tmpl": typeDefaultTypeTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"property": &bintree{nil, map[string]*bintree{
		"default": &bintree{nil, map[string]*bintree{
			"config.hcl": &bintree{propertyDefaultConfigHcl, map[string]*bintree{}},
			"field.tmpl": &bintree{propertyDefaultFieldTmpl, map[string]*bintree{}},
			"method.tmpl": &bintree{propertyDefaultMethodTmpl, map[string]*bintree{}},
		}},
	}},
	"type": &bintree{nil, map[string]*bintree{
		"default": &bintree{nil, map[string]*bintree{
			"config.hcl": &bintree{typeDefaultConfigHcl, map[string]*bintree{}},
			"type.tmpl": &bintree{typeDefaultTypeTmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

